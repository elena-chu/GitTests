<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>

<#+
public virtual void GenerateStringWrapper(string className, bool ignoreCase, bool withSetter)
{
	GenerateStringWrapper(className, ignoreCase, withSetter, string.Empty);
}

public virtual void GenerateStringWrapper(string className, bool ignoreCase, bool withSetter, string emptyValue)
{
#>
	///////////////////////////////////////////////////////////////////////////////////////////////
	/// NOTE, THE CLASS IS AUTOGENERATED, DON'T EDIT !!!
<#+
    if (ignoreCase)
	{
#>
    /// Case insensitive string wrapper
<#+
    }
	else
	{
#>
    /// Case sensitive string wrapper
<#+
    }
#>
	///////////////////////////////////////////////////////////////////////////////////////////////

    public class <#= className #> : IEquatable< <#= className #> >
    {
<#+
    if (string.IsNullOrEmpty(emptyValue))
	{
#>
        public static readonly <#= className #> Empty = new <#= className #>(string.Empty);
<#+
    }
	else
	{
#>
        public static readonly <#= className #> Empty = new <#= className #>("<#= emptyValue #>");
<#+
    }

    if (withSetter)
#>		
        public string Name { get; set; }
<#+
    else
#>
        public string Name { get; }
<#+
#>

        public <#= className #>(string name)
        {
		    if (name == null)
			    throw new ArgumentNullException(nameof(name));

            Name = name;
        }

        public static implicit operator string(<#= className #> w) => w.Name;
        public static explicit operator <#= className #>(string s) => new <#= className #>(s);

        public static bool operator ==(<#= className #> x, <#= className #> y)
        {
            if (object.ReferenceEquals(x, null))
            {
                return object.ReferenceEquals(y, null);
            }
            return x.Equals(y);
        }

        public static bool operator !=(<#= className #> x, <#= className #> y)
        {
            return !(x == y);
        }

		public static bool IsNullOrEmpty(<#= className #> o)
		{
		    return o == null || o == <#= className #>.Empty;
		}

        public bool Equals(<#= className #> other)
        {
            if (object.ReferenceEquals(other, null))
                return false;
<#+
    if (ignoreCase)
	{
#>
            return Name.Equals(other.Name, StringComparison.OrdinalIgnoreCase);
<#+
    }
	else
	{
#>
            return Name.Equals(other.Name, StringComparison.Ordinal);
<#+
    }
#>
        }

        // override object.Equals
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return Equals((<#= className #>)obj);
        }

        // override object.GetHashCode
        public override int GetHashCode()
        {
<#+
    if (ignoreCase)
	{
#>
            return Name.ToLower().GetHashCode();
<#+
    }
	else
	{
#>
            return Name.GetHashCode();
<#+
    }
#>
        }

        public override string ToString()
        {
            return Name;
        }
    }
<#+
}
#>
