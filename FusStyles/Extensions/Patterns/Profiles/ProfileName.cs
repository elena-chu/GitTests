

using System;
namespace Ws.Extensions.Patterns.Profiles
{
	///////////////////////////////////////////////////////////////////////////////////////////////
	/// NOTE, THE CLASS IS AUTOGENERATED, DON'T EDIT !!!
    /// Case insensitive string wrapper
	///////////////////////////////////////////////////////////////////////////////////////////////

    public class ProfileName : IEquatable< ProfileName >
    {
        public static readonly ProfileName Empty = new ProfileName(string.Empty);
		
        public string Name { get; }

        public ProfileName(string name)
        {
		    if (name == null)
			    throw new ArgumentNullException(nameof(name));

            Name = name;
        }

        public static implicit operator string(ProfileName w) => w.Name;
        public static explicit operator ProfileName(string s) => new ProfileName(s);

        public static bool operator ==(ProfileName x, ProfileName y)
        {
            if (object.ReferenceEquals(x, null))
            {
                return object.ReferenceEquals(y, null);
            }
            return x.Equals(y);
        }

        public static bool operator !=(ProfileName x, ProfileName y)
        {
            return !(x == y);
        }

		public static bool IsNullOrEmpty(ProfileName o)
		{
		    return o == null || o == ProfileName.Empty;
		}

        public bool Equals(ProfileName other)
        {
            if (object.ReferenceEquals(other, null))
                return false;
            return Name.Equals(other.Name, StringComparison.OrdinalIgnoreCase);
        }

        // override object.Equals
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return Equals((ProfileName)obj);
        }

        // override object.GetHashCode
        public override int GetHashCode()
        {
            return Name.ToLower().GetHashCode();
        }

        public override string ToString()
        {
            return Name;
        }
    }
}