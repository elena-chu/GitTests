<UserControl
  x:Class="Ws.Fus.ImageViewer.UI.Wpf.Controls.StripsMenu.StripsMenu"
  x:Name="parent"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:extensions="http://schemas.insightec.com/wpf/"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:local="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.Controls.StripsMenu"
  xmlns:vm="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ViewModels.Strips"
  Loaded="StripsMenu_Loaded"
  mc:Ignorable="d" 
  d:DesignHeight="600"
  d:DesignWidth="120">

  <UserControl.Resources>
    <DataTemplate DataType="{x:Type vm:RegistrationStrip}">
      <Grid x:Name="OuterGrid">
        <Border x:Name="OuterBorder" Style="{StaticResource XStyle.Strips.Border.Frame}">
          <Border.Resources>
            <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource XStyle.Strips.ToolTip}"/>
          </Border.Resources>
          <Border.ToolTip>
            <StackPanel>
              <StackPanel.Resources>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.ToolTip}"/>
              </StackPanel.Resources>
              <TextBlock Text="{Binding Series.PatientName}"/>
              <StackPanel Orientation="Horizontal">
                <TextBlock Text="I.D. " Visibility="{Binding Text, ElementName=PatientId, Converter={extensions:StringHasContentToVisibilityConverter}}"/>
                <TextBlock x:Name="PatientId" Text="{Binding Series.PatientId}"/>
              </StackPanel>
              <TextBlock Text="{Binding Series.SeriesDescription}"/>
              <TextBlock Text="{Binding Series.SeriesNumber}"/>
              <TextBlock Text="{Binding Series.Resolution}"/>
              <StackPanel Orientation="Horizontal">
                <TextBlock x:Name="SliceThicknessValue" Text="{Binding Series.SliceThickness}"/>
                <TextBlock Text="mm Thickness" Visibility="{Binding Text, ElementName=SliceThicknessValue, Converter={extensions:StringHasContentToVisibilityConverter}}"/>
              </StackPanel>
              <StackPanel Orientation="Horizontal">
                <TextBlock x:Name="SliceSpacingValue" Text="{Binding Series.SliceSpacing}"/>
                <TextBlock Text="mm Spacing" Visibility="{Binding Text, ElementName=SliceSpacingValue, Converter={extensions:StringHasContentToVisibilityConverter}}"/>
              </StackPanel>
            </StackPanel>
          </Border.ToolTip>
          <Border.ContextMenu>
            <ContextMenu Style="{StaticResource XStyle.ContextMenu}" extensions:IndependentSize.MinWidth="120">
              <MenuItem Header="Load"/>
              <MenuItem Header="Load All"/>
              <Separator/>
              <MenuItem Header="Delete"/>
            </ContextMenu>
          </Border.ContextMenu>
          <Grid x:Name="MainGrid" Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Stretch">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Image Grid.Row="0" Grid.RowSpan="3" Source="{Binding Image}" Style="{StaticResource XStyle.Strips.Image}">
              <Image.OpacityMask>
                <VisualBrush Stretch="Uniform" AlignmentX="Center" AlignmentY="Center">
                  <VisualBrush.Visual>
                    <Border
                      Style="{StaticResource XStyle.Border}"
                      Width="{Binding ActualWidth, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                      Height="{Binding ActualHeight, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                      Background="{StaticResource XBrush.Application.Background}"/>
                  </VisualBrush.Visual>
                </VisualBrush>
              </Image.OpacityMask>
            </Image>
            <Border Grid.Row="0" Style="{StaticResource XStyle.Strips.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Top}"/>
            <TextBlock Grid.Row="0" extensions:IndependentSize.Margin="2" Text="{Binding StripName}" Style="{StaticResource XStyle.Strips.TextBlock}"/>
            <Border Grid.Row="2" Style="{StaticResource XStyle.Strips.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Bottom}"/>
            <StackPanel Grid.Row="2" extensions:IndependentSize.Margin="2" HorizontalAlignment="Center" Orientation="Horizontal">
              <TextBlock Text="{Binding OrientationString}" Style="{StaticResource XStyle.Strips.TextBlock}"/>
              <TextBlock Text=" (" Style="{StaticResource XStyle.Strips.TextBlock}"/>
              <TextBlock Text="{Binding ImageCount}" Style="{StaticResource XStyle.Strips.TextBlock}"/>
              <TextBlock Text=")" Style="{StaticResource XStyle.Strips.TextBlock}"/>
            </StackPanel>
          </Grid>
        </Border>

        <Grid x:Name="IconGrid">
          <Border
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Background="{StaticResource XBrush.Application.Background}"
            Opacity="0.7"
            Height="{Binding ActualHeight, ElementName=IconBorder}"
            Width="{Binding ActualWidth, ElementName=IconBorder}"
            Visibility="{Binding Visibility, ElementName=IconBorder}">
            <Border.Style>
              <Style TargetType="{x:Type Border}">
                <Setter Property="extensions:IndependentSize.CornerRadius" Value="{StaticResource XCornerRadius.Circle}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsReference}" Value="True">
                    <Setter Property="extensions:IndependentSize.CornerRadius" Value="{StaticResource XCornerRadius.Frame}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Border.Style>
          </Border>
          <Border
            x:Name="IconBorder"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Height="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.28}"
            Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}">
            <Border.Style>
              <Style TargetType="{x:Type Border}">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="extensions:IndependentSize.Padding" Value="3.5"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsRegistered}" Value="False">
                    <Setter Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding HasAutoRegistration}" Value="True">
                    <Setter Property="extensions:IndependentSize.Padding" Value="3"/>
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Border.Style>
            <Path Stretch="UniformToFill">
              <Path.Style>
                <Style TargetType="{x:Type Path}">
                  <Setter Property="Data" Value="{x:Null}"/>
                  <Setter Property="Fill" Value="{StaticResource XBrush.Strips.Foreground.Loaded}"/>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding HasAutoRegistration}" Value="True">
                      <Setter Property="Data" Value="{StaticResource XGeometry.DashedCircleCheckmark}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsRegistered}" Value="True">
                      <Setter Property="Data" Value="{StaticResource XGeometry.FilledCircleCheckmark}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsReference}" Value="True">
                      <Setter Property="Data" Value="{StaticResource XGeometry.Reference}"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsEnabled}" Value="False"/>
                        <Condition Binding="{Binding HasAutoRegistration}" Value="True"/>
                        <Condition Binding="{Binding IsReference}" Value="False"/>
                      </MultiDataTrigger.Conditions>
                      <Setter Property="Fill" Value="{StaticResource XBrush.Strips.Frame.Unloaded}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsEnabled}" Value="False"/>
                        <Condition Binding="{Binding IsRegistered}" Value="True"/>
                        <Condition Binding="{Binding IsReference}" Value="False"/>
                      </MultiDataTrigger.Conditions>
                      <Setter Property="Fill" Value="{StaticResource XBrush.Strips.Frame.Unloaded}"/>
                    </MultiDataTrigger>
                  </Style.Triggers>
                </Style>
              </Path.Style>
            </Path>
          </Border>
        </Grid>
      </Grid>
      
      <DataTemplate.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Opacity" TargetName="OuterBorder" Value="0.5"/>
        </Trigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
            <Condition Binding="{Binding IsReference}" Value="False"/>
          </MultiDataTrigger.Conditions>
          <Setter Property="Opacity" TargetName="IconGrid" Value="0.5"/>
        </MultiDataTrigger>
      </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:Strip}">
      <Border Style="{StaticResource XStyle.Strips.Border.Frame}">
        <Border.Resources>
          <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource XStyle.Strips.ToolTip}"/>
        </Border.Resources>
        <Border.ToolTip>
          <StackPanel>
            <StackPanel.Resources>
              <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.ToolTip}"/>
            </StackPanel.Resources>
            <TextBlock Text="{Binding Series.PatientName}"/>
            <StackPanel Orientation="Horizontal">
              <TextBlock Text="I.D. " Visibility="{Binding Text, ElementName=PatientId, Converter={extensions:StringHasContentToVisibilityConverter}}"/>
              <TextBlock x:Name="PatientId" Text="{Binding Series.PatientId}"/>
            </StackPanel>
            <TextBlock Text="{Binding Series.SeriesDescription}"/>
            <TextBlock Text="{Binding Series.SeriesNumber}"/>
            <TextBlock Text="{Binding Series.Resolution}"/>
            <StackPanel Orientation="Horizontal">
              <TextBlock x:Name="SliceThicknessValue" Text="{Binding Series.SliceThickness}"/>
              <TextBlock Text="mm Thickness" Visibility="{Binding Text, ElementName=SliceThicknessValue, Converter={extensions:StringHasContentToVisibilityConverter}}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
              <TextBlock x:Name="SliceSpacingValue" Text="{Binding Series.SliceSpacing}"/>
              <TextBlock Text="mm Spacing" Visibility="{Binding Text, ElementName=SliceSpacingValue, Converter={extensions:StringHasContentToVisibilityConverter}}"/>
            </StackPanel>
          </StackPanel>
        </Border.ToolTip>
        <Grid x:Name="MainGrid" Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Stretch">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
          </Grid.RowDefinitions>
          <Image Grid.Row="0" Grid.RowSpan="3" Source="{Binding Image}" Style="{StaticResource XStyle.Strips.Image}">
            <Image.OpacityMask>
              <VisualBrush Stretch="Uniform" AlignmentX="Center" AlignmentY="Center">
                <VisualBrush.Visual>
                  <Border
                    Style="{StaticResource XStyle.Border}"
                    Width="{Binding ActualWidth, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                    Height="{Binding ActualHeight, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                    Background="{StaticResource XBrush.Application.Background}"/>
                </VisualBrush.Visual>
              </VisualBrush>
            </Image.OpacityMask>
          </Image>
          <Border Grid.Row="0" Style="{StaticResource XStyle.Strips.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Top}"/>
          <TextBlock Grid.Row="0" extensions:IndependentSize.Margin="2" Text="{Binding StripName}" Style="{StaticResource XStyle.Strips.TextBlock}"/>
          <Border Grid.Row="2" Style="{StaticResource XStyle.Strips.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Bottom}"/>
          <StackPanel Grid.Row="2" extensions:IndependentSize.Margin="2" HorizontalAlignment="Center" Orientation="Horizontal">
            <TextBlock Text="{Binding OrientationString}" Style="{StaticResource XStyle.Strips.TextBlock}"/>
            <TextBlock Text=" (" Style="{StaticResource XStyle.Strips.TextBlock}"/>
            <TextBlock Text="{Binding ImageCount}" Style="{StaticResource XStyle.Strips.TextBlock}"/>
            <TextBlock Text=")" Style="{StaticResource XStyle.Strips.TextBlock}"/>
          </StackPanel>
        </Grid>
      </Border>
      <DataTemplate.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Opacity" Value="0.5"/>
        </Trigger>
      </DataTemplate.Triggers>
    </DataTemplate>
  </UserControl.Resources>

  <ListView
    Name="lvStrips"
    Padding="0"
    VerticalAlignment="Stretch"
    HorizontalAlignment="Stretch"
    DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
    Background="Transparent"
    ScrollViewer.VerticalScrollBarVisibility="Visible"
    ScrollViewer.HorizontalScrollBarVisibility="Hidden"
    BorderThickness="0"
    ItemsSource="{Binding Strips}"
    ItemContainerStyle="{StaticResource XStyle.ListBoxItem.Strips}"
    PreviewMouseLeftButtonDown="Strips_PreviewMouseLeftButtonDown"
    PreviewMouseMove="Strips_PreviewMouseMove">
    <ListView.Resources>
      <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource XStyle.ScrollViewer}"/>
      <Style TargetType="{x:Type ItemsPresenter}">
        <Setter Property="MaxWidth" Value="{Binding ActualWidth, RelativeSource={RelativeSource findAncestor, AncestorType=ScrollContentPresenter}}" />
      </Style>
    </ListView.Resources>
    <ListView.GroupStyle>
      <GroupStyle>
        <GroupStyle.HeaderTemplate>
          <DataTemplate>
            <TextBlock
              TextAlignment="Center"
              Text="{Binding Name}"
              Foreground="{StaticResource XBrush.Strips.Foreground.Unloaded}">
              <TextBlock.Style>
                <Style TargetType="TextBlock" BasedOn="{StaticResource XStyle.TextBlock.Caption}">
                  <Setter Property="FontSize" Value="18" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsBottomLevel}" Value="True">
                      <Setter Property="extensions:IndependentSize.FontSize" Value="15" />
                      <Setter Property="Opacity" Value=".8" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
          </DataTemplate>
        </GroupStyle.HeaderTemplate>
        <GroupStyle.ContainerStyle>
          <Style TargetType="{x:Type GroupItem}">
            <Setter Property="extensions:IndependentSize.Margin" Value="0,0,0,10"/>
          </Style>
        </GroupStyle.ContainerStyle>
      </GroupStyle>
    </ListView.GroupStyle>
  </ListView>
</UserControl>
