<UserControl
  x:Class="Ws.Fus.ImageViewer.UI.Wpf.Controls.StripsMenu.StripsMenu"
  x:Name="parent"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:extensions="http://schemas.insightec.com/wpf/"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:sys="clr-namespace:System;assembly=mscorlib"
  xmlns:local="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.Controls.StripsMenu"
  xmlns:vm="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ViewModels.Strips"
  Loaded="StripsMenu_Loaded"
  mc:Ignorable="d" 
  d:DesignHeight="600"
  d:DesignWidth="120">
  
  <UserControl.Resources>
    <extensions:ConverterProxy x:Key="converterProxy" />
    <extensions:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
    <!--<local:StripOrientationToTextConverter x:Key="orientationConverter" />-->
    <!--<extensions:BindingProxy x:Key="proxy" Data="{Binding StripActionsHolder, ElementName=parent}" />-->

    <Style x:Key="LStyle.Border" TargetType="{x:Type Border}" BasedOn="{StaticResource XStyle.Border}">
      <Setter Property="extensions:IndependentSize.Margin" Value="1,4"/>
      <Setter Property="Background" Value="{StaticResource XBrush.AlmostTransparent}"/>
      <Setter Property="BorderThickness" Value="{StaticResource XThickness.Frame}"/>
      <Setter Property="BorderBrush" Value="{StaticResource XBrush.Strips.Frame.Unloaded}"/>
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
          <Setter Property="Opacity" Value="0.6"/>
        </DataTrigger>
        <DataTrigger Binding="{Binding IsLoaded}" Value="True">
          <Setter Property="BorderBrush" Value="{StaticResource XBrush.Strips.Frame.Loaded}"/>
        </DataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
            <Condition Binding="{Binding IsLoaded}" Value="True"/>
          </MultiDataTrigger.Conditions>
          <MultiDataTrigger.EnterActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
                <ColorAnimation To="{StaticResource XColor.Application.Active}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.EnterActions>
          <MultiDataTrigger.ExitActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
                <ColorAnimation To="{StaticResource XColor.Button.Primary.Background.Pressed}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.ExitActions>
        </MultiDataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
            <Condition Binding="{Binding IsLoaded}" Value="False"/>
          </MultiDataTrigger.Conditions>
          <MultiDataTrigger.EnterActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
                <ColorAnimation To="{StaticResource XColor.Button.Secondary.Foreground}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.EnterActions>
          <MultiDataTrigger.ExitActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
                <ColorAnimation To="{StaticResource XColor.Control.Foreground.Disabled}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.ExitActions>
        </MultiDataTrigger>
        <Trigger Property="IsMouseOver" Value="True">
          <Trigger.EnterActions>
            <BeginStoryboard>
              <Storyboard>
                <ThicknessAnimation Storyboard.TargetProperty="BorderThickness" To="2" Duration="{StaticResource XDuration.Animation.Short}"/>
                <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.Margin)" To="0,3" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </Trigger.EnterActions>
          <Trigger.ExitActions>
            <BeginStoryboard>
              <Storyboard>
                <ThicknessAnimation Storyboard.TargetProperty="BorderThickness" To="{StaticResource XThickness.Frame}" Duration="{StaticResource XDuration.Animation.Short}"/>
                <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.Margin)" To="1,4" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </Trigger.ExitActions>
        </Trigger>
      </Style.Triggers>
    </Style>

    <Style x:Key="LStyle.TextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.Caption}">
      <Setter Property="HorizontalAlignment" Value="Center"/>
      <Setter Property="Foreground" Value="{StaticResource XBrush.Strips.Text.Unloaded}"/>
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsLoaded}" Value="True">
          <Setter Property="Foreground" Value="{StaticResource XBrush.Strips.Text.Loaded}"/>
        </DataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type Border}}}" Value="True"/>
            <Condition Binding="{Binding IsLoaded}" Value="True"/>
          </MultiDataTrigger.Conditions>
          <MultiDataTrigger.EnterActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Application.Active}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.EnterActions>
          <MultiDataTrigger.ExitActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Button.Primary.Background.Pressed}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.ExitActions>
        </MultiDataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type Border}}}" Value="True"/>
            <Condition Binding="{Binding IsLoaded}" Value="False"/>
          </MultiDataTrigger.Conditions>
          <MultiDataTrigger.EnterActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Button.Secondary.Foreground}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.EnterActions>
          <MultiDataTrigger.ExitActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Button.IconButton.Caption}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.ExitActions>
        </MultiDataTrigger>
      </Style.Triggers>
    </Style>
    
    <Style x:Key="LStyle.Image" TargetType="{x:Type Image}">
      <Setter Property="Stretch" Value="UniformToFill"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="Opacity" Value="1"/>
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
          <Setter Property="Opacity" Value="0.6"/>
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style x:Key="LStyle.ListBoxItem" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource XStyle.ListBoxItem.Transparent}">
      <Setter Property="IsEnabled" Value="{Binding IsAvailable}"/>
    </Style>

    <DataTemplate DataType="{x:Type vm:Strip}">
      <Border Style="{StaticResource LStyle.Border}">
        <Grid Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Stretch">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
          </Grid.RowDefinitions>
          <TextBlock
            Grid.Row="0"
            extensions:IndependentSize.Margin="0,0,0,3"
            Text="{Binding StripName}"
            Style="{StaticResource LStyle.TextBlock}"/>
          <Image Grid.Row="1" Source="{Binding Image}" Style="{StaticResource LStyle.Image}"/>
          <TextBlock
            Grid.Row="2"
            extensions:IndependentSize.Margin="0,3,0,0"
            Text="{Binding ImageCount}"
            Style="{StaticResource LStyle.TextBlock}"/>
        </Grid>
      </Border>
    </DataTemplate>
  </UserControl.Resources>
  
  <Grid>
    <ListView
      Name="lvStrips"
      Padding="0"
      VerticalAlignment="Stretch"
      HorizontalAlignment="Stretch"
      DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
      Background="Transparent"
      ScrollViewer.VerticalScrollBarVisibility="Visible"
      ScrollViewer.HorizontalScrollBarVisibility="Hidden"
      BorderThickness="0"
      BorderBrush="Transparent"
      TextBlock.Foreground="{StaticResource XBrush.Application.Foreground}"
      ItemsSource="{Binding Strips}"
      ItemContainerStyle="{StaticResource LStyle.ListBoxItem}"
      PreviewMouseLeftButtonDown="Strips_PreviewMouseLeftButtonDown"
      PreviewMouseMove="Strips_PreviewMouseMove">
      <ListView.Resources>
        <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource XStyle.ScrollViewer}"/>
      </ListView.Resources>
      <ListView.GroupStyle>
        <GroupStyle>
          <GroupStyle.HeaderTemplate>
            <DataTemplate>
              <TextBlock FontWeight="Bold" TextAlignment="Center" Text="{Binding Name}" />
            </DataTemplate>
          </GroupStyle.HeaderTemplate>
        </GroupStyle>
      </ListView.GroupStyle>
      <!--<ListView.ContextMenu>
        <ContextMenu SnapsToDevicePixels="True" >
          <ContextMenu.Style>
            <Style TargetType="{x:Type ContextMenu}">
              <Style.Triggers>
                <Trigger Property="HasItems" Value="False">
                  <Setter Property="Visibility" Value="Collapsed" />
                </Trigger>
              </Style.Triggers>
            </Style>
          </ContextMenu.Style>
          <MenuItem x:Name="LoadAct" Header="Load" Command="{Binding StripActionsHolder.LoadStripCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" />
          <MenuItem Header="Load to all" Command="{Binding StripActionsHolder.LoadToAllStripsCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" />
          <Separator Visibility="{Binding Visibility, Source={x:Reference LoadAct}}" />

           --><!--&#10; for 2lines--><!--
          <MenuItem x:Name="CopyRegAct" Header="Copy Registration" Command="{Binding StripActionsHolder.CopyRegistrationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" Visibility="{Binding Command, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}" />
          <MenuItem x:Name="ClearRegAct" Header="Clear Registration" Command="{Binding StripActionsHolder.ClearRegistrationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" Visibility="{Binding Command, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}"  />
          <Separator Visibility="{Binding Visibility, Source={x:Reference ClearRegAct}}" />

          <MenuItem Header="Delete Series" Command="{Binding StripActionsHolder.DeleteStripCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" />

        </ContextMenu>
      </ListView.ContextMenu>-->
    </ListView>
  </Grid>
</UserControl>
