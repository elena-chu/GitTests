<UserControl
  x:Class="Ws.Fus.ImageViewer.UI.Wpf.Controls.StripsMenu.StripsMenu"
  x:Name="parent"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:extensions="http://schemas.insightec.com/wpf/"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:local="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.Controls.StripsMenu"
  xmlns:vm="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ViewModels.Strips"
  Loaded="StripsMenu_Loaded"
  mc:Ignorable="d" 
  d:DesignHeight="600"
  d:DesignWidth="120">

  <UserControl.Resources>
    <extensions:ConverterProxy x:Key="converterProxy" />
    <extensions:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
    <!--<local:StripOrientationToTextConverter x:Key="orientationConverter" />-->
    <!--<extensions:BindingProxy x:Key="proxy" Data="{Binding StripActionsHolder, ElementName=parent}" />-->

    <Style x:Key="LStyle.Border.Frame" TargetType="{x:Type Border}" BasedOn="{StaticResource XStyle.Border}">
      <Setter Property="extensions:IndependentSize.Margin" Value="12,1"/>
      <Setter Property="Background" Value="{StaticResource XBrush.AlmostTransparent}"/>
      <Setter Property="extensions:IndependentSize.BorderThickness" Value="{StaticResource XThickness.Frame}"/>
      <Setter Property="BorderBrush" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
      <Style.Triggers>
        <!--<DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
          <Setter Property="Opacity" Value="0.5"/>
        </DataTrigger>-->
        <Trigger Property="IsMouseOver" Value="True">
          <Trigger.EnterActions>
            <BeginStoryboard>
              <Storyboard>
                <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.BorderThickness)" To="2" Duration="{StaticResource XDuration.Animation.Short}"/>
                <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.Margin)" To="11,0" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </Trigger.EnterActions>
          <Trigger.ExitActions>
            <BeginStoryboard>
              <Storyboard>
                <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.BorderThickness)" To="{StaticResource XThickness.Frame}" Duration="{StaticResource XDuration.Animation.Short}"/>
                <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.Margin)" To="12,1" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </Trigger.ExitActions>
        </Trigger>
      </Style.Triggers>
    </Style>

    <Style x:Key="LStyle.Border.Emphasis" TargetType="{x:Type Border}" BasedOn="{StaticResource XStyle.Border}">
      <Setter Property="Background" Value="{StaticResource XBrush.Application.Background}"/>
      <Setter Property="Opacity" Value="0.6"/>
    </Style>

    <Style x:Key="LStyle.TextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.Caption}">
      <Setter Property="HorizontalAlignment" Value="Center"/>
      <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
      <Setter Property="extensions:IndependentSize.FontSize" Value="{StaticResource XDouble.FontSize.ToolTip}"/>
    </Style>

    <Style x:Key="LStyle.Image" TargetType="{x:Type Image}">
      <Setter Property="Stretch" Value="UniformToFill"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="Opacity" Value="1"/>
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
          <Setter Property="Opacity" Value="0.6"/>
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style x:Key="LStyle.ListBoxItem" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource XStyle.ListBoxItem.Transparent}">
      <Setter Property="IsEnabled" Value="{Binding IsAvailable}"/>
      <Setter Property="Foreground" Value="{StaticResource XBrush.Strips.Foreground.Unloaded}"/>
      <Setter Property="extensions:IndependentSize.Margin" Value="0,4,0,6"/>
      <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Opacity" Value="0.5"/>
        </Trigger>
        <DataTrigger Binding="{Binding IsLoaded}" Value="True">
          <Setter Property="Foreground" Value="{StaticResource XBrush.Strips.Foreground.Loaded}"/>
        </DataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
            <Condition Binding="{Binding IsLoaded}" Value="True"/>
          </MultiDataTrigger.Conditions>
          <MultiDataTrigger.EnterActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Application.Active}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.EnterActions>
          <MultiDataTrigger.ExitActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Button.Primary.Background.Pressed}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.ExitActions>
        </MultiDataTrigger>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
            <Condition Binding="{Binding IsLoaded}" Value="False"/>
          </MultiDataTrigger.Conditions>
          <MultiDataTrigger.EnterActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Button.Secondary.Foreground}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.EnterActions>
          <MultiDataTrigger.ExitActions>
            <BeginStoryboard>
              <Storyboard Storyboard.TargetProperty="Foreground.Color">
                <ColorAnimation To="{StaticResource XColor.Button.IconButton.Caption}" Duration="{StaticResource XDuration.Animation.Short}"/>
              </Storyboard>
            </BeginStoryboard>
          </MultiDataTrigger.ExitActions>
        </MultiDataTrigger>
      </Style.Triggers>
    </Style>

    <DataTemplate DataType="{x:Type vm:RegistrationStrip}">
      <Border Style="{StaticResource LStyle.Border.Frame}">
        <Grid x:Name="MainGrid" Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Stretch">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
          </Grid.RowDefinitions>
          <Image Grid.Row="0" Grid.RowSpan="3" Source="{Binding Image}" Style="{StaticResource LStyle.Image}">
            <Image.OpacityMask>
              <VisualBrush Stretch="Uniform" AlignmentX="Center" AlignmentY="Center">
                <VisualBrush.Visual>
                  <Border
                    Style="{StaticResource XStyle.Border}"
                    Width="{Binding ActualWidth, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                    Height="{Binding ActualHeight, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                    Background="Black"/>
                </VisualBrush.Visual>
              </VisualBrush>
            </Image.OpacityMask>
          </Image>
          <Border Grid.Row="0" Style="{StaticResource LStyle.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Top}"/>
          <TextBlock Grid.Row="0" extensions:IndependentSize.Margin="2" Text="{Binding StripName}" Style="{StaticResource LStyle.TextBlock}"/>
          <Ellipse
            Grid.Row="1"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Fill="{StaticResource XBrush.Application.Background}"
            Opacity="0.7"
            Height="{Binding ActualHeight, ElementName=IconBorder}"
            Width="{Binding ActualWidth, ElementName=IconBorder}"/>
          <Border
            x:Name="IconBorder"
            Grid.Row="1"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Height="{Binding ActualHeight, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.28}"
            Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}">
            <Border.Style>
              <Style TargetType="{x:Type Border}">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="extensions:IndependentSize.Padding" Value="3.5"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding RegistrationStatus}" Value="Unregistered">
                    <Setter Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding RegistrationStatus}" Value="Ready">
                    <Setter Property="extensions:IndependentSize.Padding" Value="3"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Border.Style>
            <Path Stretch="UniformToFill">
              <Path.Style>
                <Style TargetType="{x:Type Path}">
                  <Setter Property="Data" Value="{x:Null}"/>
                  <Setter Property="Fill" Value="{StaticResource XBrush.Strips.Foreground.Loaded}"/>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding RegistrationStatus}" Value="Ready">
                      <Setter Property="Data" Value="{StaticResource XGeometry.DashedCircleCheckmark}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding RegistrationStatus}" Value="Approved">
                      <Setter Property="Data" Value="{StaticResource XGeometry.FilledCircleCheckmark}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsReference}" Value="True">
                      <Setter Property="Data" Value="{StaticResource XGeometry.FilledCircleRef}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsAvailable}" Value="False">
                      <Setter Property="Fill" Value="{StaticResource XBrush.Strips.Foreground.Unloaded}"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True"/>
                        <Condition Binding="{Binding IsAvailable}" Value="True"/>
                      </MultiDataTrigger.Conditions>
                      <MultiDataTrigger.EnterActions>
                        <BeginStoryboard>
                          <Storyboard Storyboard.TargetProperty="Fill.Color">
                            <ColorAnimation To="{StaticResource XColor.Application.Active}" Duration="{StaticResource XDuration.Animation.Short}"/>
                          </Storyboard>
                        </BeginStoryboard>
                      </MultiDataTrigger.EnterActions>
                      <MultiDataTrigger.ExitActions>
                        <BeginStoryboard>
                          <Storyboard Storyboard.TargetProperty="Fill.Color">
                            <ColorAnimation To="{StaticResource XColor.Button.Primary.Background.Pressed}" Duration="{StaticResource XDuration.Animation.Short}"/>
                          </Storyboard>
                        </BeginStoryboard>
                      </MultiDataTrigger.ExitActions>
                    </MultiDataTrigger>
                  </Style.Triggers>
                </Style>
              </Path.Style>
            </Path>
          </Border>
          <Border Grid.Row="2" Style="{StaticResource LStyle.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Bottom}"/>
          <StackPanel Grid.Row="2" extensions:IndependentSize.Margin="2" HorizontalAlignment="Center" Orientation="Horizontal">
            <TextBlock Text="{Binding OrientationString}" Style="{StaticResource LStyle.TextBlock}"/>
            <TextBlock Text=" (" Style="{StaticResource LStyle.TextBlock}"/>
            <TextBlock Text="{Binding ImageCount}" Style="{StaticResource LStyle.TextBlock}"/>
            <TextBlock Text=")" Style="{StaticResource LStyle.TextBlock}"/>
          </StackPanel>
        </Grid>
      </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:Strip}">
      <Border Style="{StaticResource LStyle.Border.Frame}">
        <Grid x:Name="MainGrid" Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Stretch">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
          </Grid.RowDefinitions>
          <Image Grid.Row="0" Grid.RowSpan="3" Source="{Binding Image}" Style="{StaticResource LStyle.Image}">
            <Image.OpacityMask>
              <VisualBrush Stretch="Uniform" AlignmentX="Center" AlignmentY="Center">
                <VisualBrush.Visual>
                  <Border
                    Style="{StaticResource XStyle.Border}"
                    Width="{Binding ActualWidth, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                    Height="{Binding ActualHeight, ElementName=MainGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.97}"
                    Background="Black"/>
                </VisualBrush.Visual>
              </VisualBrush>
            </Image.OpacityMask>
          </Image>
          <Border Grid.Row="0" Style="{StaticResource LStyle.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Top}"/>
          <TextBlock Grid.Row="0" extensions:IndependentSize.Margin="2" Text="{Binding StripName}" Style="{StaticResource LStyle.TextBlock}"/>
          <Border Grid.Row="2" Style="{StaticResource LStyle.Border.Emphasis}" extensions:IndependentSize.CornerRadius="{StaticResource XCornerRadius.Frame.Bottom}"/>
          <StackPanel Grid.Row="2" extensions:IndependentSize.Margin="2" HorizontalAlignment="Center" Orientation="Horizontal">
            <TextBlock Text="{Binding OrientationString}" Style="{StaticResource LStyle.TextBlock}"/>
            <TextBlock Text=" (" Style="{StaticResource LStyle.TextBlock}"/>
            <TextBlock Text="{Binding ImageCount}" Style="{StaticResource LStyle.TextBlock}"/>
            <TextBlock Text=")" Style="{StaticResource LStyle.TextBlock}"/>
          </StackPanel>
        </Grid>
      </Border>
    </DataTemplate>
  </UserControl.Resources>

  <ListView
    Name="lvStrips"
    Padding="0"
    VerticalAlignment="Stretch"
    HorizontalAlignment="Stretch"
    DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
    Background="Transparent"
    ScrollViewer.VerticalScrollBarVisibility="Visible"
    ScrollViewer.HorizontalScrollBarVisibility="Hidden"
    BorderThickness="0"
    ItemsSource="{Binding Strips}"
    ItemContainerStyle="{StaticResource LStyle.ListBoxItem}"
    PreviewMouseLeftButtonDown="Strips_PreviewMouseLeftButtonDown"
    PreviewMouseMove="Strips_PreviewMouseMove">
    <ListView.Resources>
      <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource XStyle.ScrollViewer}"/>
    </ListView.Resources>
    <ListView.GroupStyle>
      <GroupStyle>
        <GroupStyle.HeaderTemplate>
          <DataTemplate>
            <TextBlock TextAlignment="Center" Text="{Binding Name}" Style="{StaticResource XStyle.TextBlock.Caption}"/>
          </DataTemplate>
        </GroupStyle.HeaderTemplate>
        <GroupStyle.ContainerStyle>
          <Style TargetType="{x:Type GroupItem}">
            <Setter Property="extensions:IndependentSize.Margin" Value="0,0,0,10"/>
          </Style>
        </GroupStyle.ContainerStyle>
      </GroupStyle>
    </ListView.GroupStyle>
    <!--<ListView.ContextMenu>
      <ContextMenu SnapsToDevicePixels="True" >
        <ContextMenu.Style>
          <Style TargetType="{x:Type ContextMenu}">
            <Style.Triggers>
              <Trigger Property="HasItems" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </ContextMenu.Style>
        <MenuItem x:Name="LoadAct" Header="Load" Command="{Binding StripActionsHolder.LoadStripCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" />
        <MenuItem Header="Load to all" Command="{Binding StripActionsHolder.LoadToAllStripsCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" />
        <Separator Visibility="{Binding Visibility, Source={x:Reference LoadAct}}" />

          -->
    <!--&#10; for 2lines-->
    <!--
        <MenuItem x:Name="CopyRegAct" Header="Copy Registration" Command="{Binding StripActionsHolder.CopyRegistrationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" Visibility="{Binding Command, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}" />
        <MenuItem x:Name="ClearRegAct" Header="Clear Registration" Command="{Binding StripActionsHolder.ClearRegistrationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" Visibility="{Binding Command, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}"  />
        <Separator Visibility="{Binding Visibility, Source={x:Reference ClearRegAct}}" />

        <MenuItem Header="Delete Series" Command="{Binding StripActionsHolder.DeleteStripCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.PlacementTarget.Tag}" />

      </ContextMenu>
    </ListView.ContextMenu>-->
  </ListView>
</UserControl>
