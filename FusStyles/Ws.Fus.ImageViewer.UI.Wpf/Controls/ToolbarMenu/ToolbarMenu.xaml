<UserControl
  x:Class="Ws.Fus.ImageViewer.UI.Wpf.Controls.ToolbarMenu.ToolbarMenu"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:extensions="http://schemas.insightec.com/wpf/"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:local="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.Controls.ToolbarMenu"
  xmlns:localBeh="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.Behaviors"
  xmlns:entities="clr-namespace:Ws.Fus.ImageViewer.Interfaces.Entities;assembly=Ws.Fus.ImageViewer.Interfaces"
  xmlns:sliderViews="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ImageModes.Slider.Views"
  xmlns:flickerViews="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ImageModes.Flicker.Views"
  xmlns:fusionViews="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ImageModes.Fusion.Views"
  mc:Ignorable="d"
  x:Name="_thisToolbarMenu">
  
  <UserControl.Resources>
    <ControlTemplate x:Key="XControlTemplate.ToolbarMenuItem" TargetType="{x:Type local:ToolbarMenuItem}">
      <Border
        x:Name="HoverBorder"
        Grid.ColumnSpan="3"
        Margin="{TemplateBinding Margin}"
        Style="{StaticResource XStyle.Border.HoverAndIndependentPress.TransparentToSecondary}">
        <Grid Margin="{TemplateBinding Padding}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <Viewbox
            x:Name="IconViewbox"
            Grid.Column="0"
            extensions:IndependentSize.Margin="8,0,12,0"
            Stretch="Uniform"
            extensions:IndependentSize.Height=
              "{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource AncestorType={x:Type local:ToolbarMenuItem}}}"
            IsHitTestVisible="False">
            <ContentControl Content="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource TemplatedParent}}"/>
          </Viewbox>
          <TextBlock
            Grid.Column="1"
            extensions:IndependentSize.Margin="5,0"
            Text="{TemplateBinding Header}"
            Style="{StaticResource XStyle.TextBlock.Base}"
            FontSize="{StaticResource XDouble.FontSize.ToolTip}"
            Foreground="{TemplateBinding Foreground}"/>
          <ToggleButton
            Grid.Column="2"
            IsHitTestVisible="False"
            IsChecked="{TemplateBinding IsChecked}"
            Style="{StaticResource XStyle.ToggleButton.Switch}"
            Visibility="{Binding IsCheckable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </Grid>
      </Border>
    </ControlTemplate>

    <Style x:Key="XStyle.ToolbarMenuItem" TargetType="{x:Type local:ToolbarMenuItem}">
      <Setter Property="Template" Value="{StaticResource XControlTemplate.ToolbarMenuItem}"/>
      <Setter Property="extensions:IndependentSize.MinHeight" Value="40"/>
      <Setter Property="extensions:IndependentSize.Margin" Value="0"/>
      <Setter Property="extensions:IndependentSize.Padding" Value="9,12,12,12"/>
      <Setter Property="extensions:IconedButton.IconSize" Value="24"/>
      <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Foreground}"/>
      <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
        </Trigger>
      </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="XControlTemplate.ToolbarMenuHeader" TargetType="{x:Type local:ToolbarMenuHeader}">
      <Grid Width="Auto" HorizontalAlignment="Center">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid Width="Auto" HorizontalAlignment="Center">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <ToggleButton
            x:Name="MenuOpenerButton"
            Grid.Row="0"
            Grid.Column="1"
            extensions:IndependentSize.Margin="3,0,0,0"
            Click="MenuOpenerButton_Click"
            IsChecked="{TemplateBinding IsSubmenuOpen}"
            Style="{StaticResource XStyle.ToggleButton.ChevonRotate180}"
            HorizontalAlignment="Left"
            Visibility="{TemplateBinding HasItems, Converter={StaticResource BooleanToVisibilityConverter}}">
            <!--<ToggleButton.Style>
              <Style TargetType="ToggleButton" BasedOn="{StaticResource XStyle.ToggleButton.ChevonRotate180}">
                <Setter Property="IsChecked" Value="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
              </Style>
            </ToggleButton.Style>-->
          </ToggleButton>
          <Popup
            x:Name="Popup"
            Placement="Right"
            extensions:IndependentSize.VerticalOffset="28"
            extensions:IndependentSize.HorizontalOffset="-45"
            IsOpen="{TemplateBinding IsSubmenuOpen}"
            AllowsTransparency="True"
            Focusable="False"
            PopupAnimation="Fade">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Border
                x:Name="ArrowBorder"
                extensions:IndependentSize.Margin="20,0,0,0"
                extensions:IndependentSize.Width="25"
                extensions:IndependentSize.Height="45"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                Panel.ZIndex="5">
                <Grid>
                  <Border Height="1" VerticalAlignment="Bottom" Background="{StaticResource XBrush.Application.Background}" Margin="1,0,1,-1"/>
                  <Path
                    Margin="0,0,0,-1"
                    IsHitTestVisible="False"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Stretch="Uniform"
                    Data="{StaticResource XGeometry.Chevron.Down}"
                    Stroke="{StaticResource XBrush.Frame}"
                    extensions:IndependentSize.StrokeThickness="1"
                    Fill="{StaticResource XBrush.Application.Background}"
                    RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                      <TransformGroup>
                        <RotateTransform Angle="180"/>
                      </TransformGroup>
                    </Path.RenderTransform>
                  </Path>
                </Grid>
              </Border>
              <Border
                Grid.Row="1"
                Style="{StaticResource XStyle.Border.Frame}">
                <StackPanel IsItemsHost="True"/>
              </Border>
            </Grid>
          </Popup>
          <Button
            Grid.Row="0"
            Grid.Column="0"
            Command="{Binding HeaderClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
            CommandParameter="{TemplateBinding CommandParameter}"
            extensions:IconedButton.IconSize="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IconedButton.Icon="{TemplateBinding extensions:IconedButton.Icon}">
            <Button.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.Button.Icon}">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="Fire">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="Select">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Button.Style>
          </Button>

          <ToggleButton
            x:Name="MenuToggleBtn"
            Grid.Row="0"
            Grid.Column="0"
            IsChecked="{TemplateBinding IsActive}"
            Command="{Binding HeaderClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
            CommandParameter="{TemplateBinding CommandParameter}"
            extensions:IconedButton.IconSize="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IconedButton.Icon="{TemplateBinding extensions:IconedButton.Icon}">
            <ToggleButton.Style>
              <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ToggleButton.Icon}">
                <Setter Property="Visibility" Value="Collapsed"/>
                <!--<Setter Property="IsChecked" Value="False" />-->
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="SelectToggle">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="extensions:IconedButton.Icon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource TemplatedParent}}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="SelectCaptionToggle">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="extensions:IconedButton.Icon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource TemplatedParent}}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="Toggle">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="extensions:IconedButton.ActiveIcon" Value="{Binding (extensions:IconedButton.ActiveIcon), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Setter Property="extensions:IconedButton.InactiveIcon" Value="{Binding (extensions:IconedButton.InactiveIcon), RelativeSource={RelativeSource TemplatedParent}}" />
                  </DataTrigger>
                  <!--<DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                    <Setter Property="IsChecked" Value="True" />
                  </DataTrigger>-->
                </Style.Triggers>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>

          <!--<ToggleButton
            Grid.Row="0"
            Grid.Column="0"
            IsChecked="{TemplateBinding IsActive}"
            Command="{Binding HeaderClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
            CommandParameter="{TemplateBinding CommandParameter}"
            extensions:IconedButton.IconSize="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IconedButton.Icon="{TemplateBinding extensions:IconedButton.Icon}">
            <ToggleButton.Style>
              <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ToggleButton.Icon}">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="SelectToggle">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="SelectCaptionToggle">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>-->
          <!--<ToggleButton
            Grid.Row="0"
            Grid.Column="0"
            IsChecked="{TemplateBinding IsActive}"
            Command="{Binding HeaderClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
            CommandParameter="{TemplateBinding CommandParameter}"
            extensions:IconedButton.IconSize="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IconedButton.ActiveIcon="{TemplateBinding extensions:IconedButton.ActiveIcon}"
            extensions:IconedButton.InactiveIcon="{TemplateBinding extensions:IconedButton.InactiveIcon}">
            <ToggleButton.Style>
              <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ToggleButton.ToggleIcon}">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ToolbarItemType, RelativeSource={RelativeSource TemplatedParent}}" Value="Toggle">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>-->
        </Grid>
        <TextBlock
          x:Name="HeaderTextBlock"
          Grid.Row="1"
          Text="{TemplateBinding Header}"
          HorizontalAlignment="Center"
          extensions:IndependentSize.MinWidth="70"
          TextAlignment="Center"
          Style="{StaticResource XStyle.TextBlock.Caption}"
          Foreground="{StaticResource XBrush.Button.IconButton.Caption}"/>
      </Grid>
      <ControlTemplate.Triggers>
        <DataTrigger Binding="{Binding IsEnabled}" Value="False">
          <Setter TargetName="HeaderTextBlock" Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
        </DataTrigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type local:ToolbarMenuHeader}" TargetType="{x:Type local:ToolbarMenuHeader}">
      <Setter Property="Template" Value="{StaticResource XControlTemplate.ToolbarMenuHeader}"/>
      <Setter Property="extensions:IconedButton.Icon" Value="{x:Null}"/>
      <Setter Property="extensions:IconedButton.ActiveIcon" Value="{x:Null}"/>
      <Setter Property="extensions:IconedButton.InactiveIcon" Value="{x:Null}"/>
      <Setter Property="extensions:IconedButton.IconSize" Value="23"/>
      <Setter Property="extensions:IndependentSize.Margin" Value="0,0,20,0"/>
    </Style>

    <Style
      x:Key="ToolbarMenuHeaderCompare"
      TargetType="{x:Type local:ToolbarMenuHeader}"
      BasedOn="{StaticResource {x:Type local:ToolbarMenuHeader}}">
      <Setter Property="Header" Value="{Binding InactiveHeader, RelativeSource={RelativeSource Self}}"/>
      <Style.Triggers>
        <Trigger Property="IsActive" Value="True">
          <Setter Property="Header" Value="{Binding ActiveHeader, RelativeSource={RelativeSource Self}}"/>
        </Trigger>
      </Style.Triggers>
    </Style>
    
    <Style
      x:Key="{x:Type local:ToolbarMenuHeaderCompare}"
      TargetType="{x:Type local:ToolbarMenuHeaderCompare}"
      BasedOn="{StaticResource {x:Type local:ToolbarMenuHeader}}">
      <Setter Property="Header" Value="{Binding InactiveHeader, RelativeSource={RelativeSource Self}}"/>
      <Style.Triggers>
        <Trigger Property="IsActive" Value="True">
          <Setter Property="Header" Value="{Binding ActiveHeader, RelativeSource={RelativeSource Self}}"/>
        </Trigger>
      </Style.Triggers>
    </Style>
    
    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
      <Setter Property="OverridesDefaultStyle" Value="True"/>
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Menu}">
            <StackPanel HorizontalAlignment="Left" Orientation="Horizontal" IsItemsHost="True"/>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

  </UserControl.Resources>

  <Grid extensions:IndependentSize.Margin="0,1">
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition/>
      <ColumnDefinition Width="Auto"/>
    </Grid.ColumnDefinitions>

    <Rectangle
      Grid.Column="0"
      extensions:IndependentSize.Margin="0,0,10,0"
      Style="{DynamicResource BorderBottomLeftVerticalStyle}"
      extensions:IndependentSize.Height="80"/>

    <Border 
      Grid.Column="2"
      extensions:IndependentSize.Margin="-85,-1,0,-1"
      Background="{StaticResource XBrush.Button.Secondary.Background.Hover}" 
      Style="{StaticResource XStyle.Border}"
      Opacity="0.4"
      Visibility="{Binding Visibility, ElementName=CompareMenu}"/>

    <Menu x:Name="Menu" Grid.Column="1" VerticalAlignment="Center">
      <local:ToolbarMenuHeader
        x:Name="TbmItemCycle"
        Header="Cycle"
        ToolbarItemType="Fire"
        Command="{Binding CycleCommand}"
        extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Cycle}"
        extensions:IconedButton.IconSize="28"/>

      <local:ToolbarMenuHeader
          x:Name="TbmItemView"
          Header="View" 
          DataContext="{Binding Commands.Measure}"
          ToolbarItemType="SelectToggle"
          IsActive="False"
          CheckedCommandParameter ="{StaticResource XBoolean.True}"
          UncheckedCommandParameter ="{StaticResource XBoolean.False}" >
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="CommandParameter" Value="{StaticResource XBoolean.True}"/>
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="Zoom"
            x:Name="TbmItemZoom"
            Header="Zoom"
            ToolbarItemType="SelectToggle"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Zoom}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="Pan"
            x:Name="TbmItemPan"
            Header="Pan"
            ToolbarItemType="SelectToggle"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Pan}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="Windowing"
            Header="Window"
            ToolbarItemType="SelectToggle"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Window}"/>
        <local:ToolbarMenuItem
            Header="Reset View"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.ResetView}"/>
        <local:ToolbarMenuItem
            Header="Center on Click"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.CenterOnClick}"/>
        <local:ToolbarMenuItem
            Header="Center on Target"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.CenterOnTarget}"/>
        <local:ToolbarMenuItem
            Header="Transducer Map"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.TransducerMap}"/>
        <local:ToolbarMenuItem
            Header="Screenshot"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Screenshot}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeader
          Header="Draw"
          DataContext="{Binding Commands.Measure}"
          ToolbarItemType="SelectToggle"
          IsActive="False"
          CheckedCommandParameter ="{StaticResource XBoolean.True}"
          UncheckedCommandParameter ="{StaticResource XBoolean.False}"
          >
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="ToolbarItemType" Value="SelectToggle"/>
            <Setter Property="CommandParameter" Value="{StaticResource XBoolean.True}"/>
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="MeasurementOverlay"
            localBeh:UiModeEnter.SubMode="MeasurementDistanceOverlay"
            Header="Line" 
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Line}"/>
        <local:ToolbarMenuItem
            localBeh:UiModeEnter.Mode="MeasurementOverlay"
            localBeh:UiModeEnter.SubMode="MeasurementAreaOverlay"
            Header="Area"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Area}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="MeasurementOverlay"
            localBeh:UiModeEnter.SubMode="MeasurementAngleOverlay"
            Header="Angle"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Angle}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="MeasurementOverlay"
            localBeh:UiModeEnter.SubMode="MeasurementAngle90"
            Header="90 Angle"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Angle90}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="MeasurementOverlay"
            localBeh:UiModeEnter.SubMode="MeasurementAngleACPC90"
            Header="ACPC 90 Angle"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.AngleAcPc}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeEnter.Mode="FiducialsOverlay"
            Header="Fiducial"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Fiducial}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeader
          x:Name="OverlaysMenuHeader"
          Header="Overlays" 
          DataContext="{Binding Commands.Overlays}"
          ToolbarItemType="Toggle"
          CheckedCommandParameter ="{StaticResource XBoolean.True}"
          UncheckedCommandParameter ="{StaticResource XBoolean.False}"
          extensions:IconedButton.ActiveIcon="{StaticResource XCanvas.Menu.Overlays.Shown}"
          extensions:IconedButton.InactiveIcon="{StaticResource XCanvas.Menu.Overlays.Hidden}"
          ActivatedChanged="OnToolbarMenuHeaderActivated"
          >
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="IsCheckable" Value="True"/>
            <Setter Property="StaysOpenOnClick" Value="True"/>
            <Setter Property="CommandParameter" Value="{x:Null}" />
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="IntersectingSlicesOverlay"
            Header="Cross reference lines"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.ReferenceLines}"/>
        <local:ToolbarMenuItem localBeh:UiModeShow.Mode="TextOverlay"
            Header="Image info"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Info}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Modes="MeasurementOverlay"
            Header="Lines, Areas &amp; Angles"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.LineArea}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="FiducialsOverlay"
            Header="Fiducials"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Fiducials}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="CalibrationDataOverlay"
            Header="Transducer"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Transducer}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="BathLimitsOverlay"
            Header="Envelope"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Envelope}"/>
        <!--<local:ToolbarMenuItem
            Header="Ghost Cursor NoN"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.GhostCursor}"/>-->
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Modes="MeshNPRAirOverlay,MeshNPROverlay,NPRPolygonsOverlay,RigidNPROverlay,MeshNPRMembraneFolds"
            Header="Non-Pass Regions"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.NonPassRegions}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="PreOpSegmentationOverlay"
            Header="Skull overlay"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Skull}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="ACPCOverlay"
            Header="AC-PC Markers"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.AcPc}"/>
        <local:ToolbarMenuItem
            Header="Active Elements NoN"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.ActiveElements}"/>
        <local:ToolbarMenuItem
            Header="Disabled Elements NoN"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.DisabledElements}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="Tractography"
            Header="Tracts"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Tracts}"/>
        <local:ToolbarMenuItem
            Header="Grid NoN"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Grid}"/>
        <local:ToolbarMenuItem
            localBeh:UiModeShow.Mode="AccumDoseMesh"
            Header="Dose"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Dose}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="TempMonitoringVolume"
            Header="Monitoring Volume"
            extensions:IconedButton.Icon="{StaticResource XCanvas.MonitoringVolume}"/>
        <local:ToolbarMenuItem 
            localBeh:UiModeShow.Mode="ScanGridOverlay"
            Header="Scan Plane"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.ScanPlane}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeader 
          Header="Delete" 
          DataContext="{Binding Commands.Delete}"
          ToolbarItemType="Select">
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="CommandParameter" Value="{StaticResource XBoolean.True}"/>
            <Setter Property="ToolbarItemType" Value="Select"/>
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem 
            Header="Delete" 
            Command="{Binding DeleteCommand}"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Delete}"/>
        <local:ToolbarMenuItem 
            Header="Delete All" 
            Command="{Binding DeleteAllCommand}"
            extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.DeleteAll}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeaderCompare
        x:Name="CompareMenuHeader"
        extensions:IndependentSize.Margin="0"
        InactiveHeader="Compare"
        ToolbarItemType="SelectCaptionToggle"
        IsActive="False"
        UncheckedCommandParameter ="{x:Static entities:CompareMode.Simple}"
        MemberOfMutuallyExclusiveGroup="True"
        ActivatedChanged="OnToolbarCompareMenuHeaderActivated"
        extensions:IndependentSize.MinWidth="100"
        Style="{StaticResource ToolbarMenuHeaderCompare}"
        >
        <local:ToolbarMenuHeaderCompare.Resources>
            <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
              <Setter Property="ToolbarItemType" Value="SelectCaptionToggle"/>
              <Setter Property="Command" Value="{Binding SwitchCompareModeCommand}"/>
            </Style>
        </local:ToolbarMenuHeaderCompare.Resources>
        <local:ToolbarMenuItem
          Header="Swipe"
          CommandParameter="{x:Static entities:CompareMode.Slider}"
          IsChecked="{Binding ImageModeController.Mode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static entities:CompareMode.Slider}, Mode=OneWay}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Compare.SwipeOpacity}"/>
        <local:ToolbarMenuItem
          Header="Flicker"
          CommandParameter="{x:Static entities:CompareMode.Flicker}"
          IsChecked="{Binding ImageModeController.Mode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static entities:CompareMode.Flicker}, Mode=OneWay}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Compare.Flicker}"/>
        <local:ToolbarMenuItem
          Header="Fusion"
          CommandParameter="{x:Static entities:CompareMode.Fusion}"
          IsChecked="{Binding ImageModeController.Mode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static entities:CompareMode.Fusion}, Mode=OneWay}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Compare.Fusion}"/>
      </local:ToolbarMenuHeaderCompare>
    </Menu>


    <Grid
      x:Name="CompareMenu"
      Grid.Column="2" 
      extensions:IndependentSize.Margin="0,2,0,0"
      Visibility="{Binding IsActive, ElementName=CompareMenuHeader, Converter={StaticResource BooleanToVisibilityConverter}}"
      Width="Auto"
      Height="Auto"
      VerticalAlignment="Center">
      <Grid.Resources>
        <DataTemplate x:Key ="SliderModeControl">
          <sliderViews:SliderModeControlView/>
        </DataTemplate>
        <DataTemplate x:Key ="FlickerModeControl" >
          <flickerViews:FlickerModeControlView/>
        </DataTemplate>
        <DataTemplate x:Key ="FusionModeControl">
          <fusionViews:FusionModeControlView/>
        </DataTemplate>
      </Grid.Resources>
      
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>

      <ContentControl x:Name="CompareModeControl" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center">
        <ContentControl.Style>
          <Style TargetType="{x:Type ContentControl}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Simple}">
                <Setter Property="ContentTemplate" Value="{StaticResource SliderModeControl}"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Flicker}">
                <Setter Property="ContentTemplate" Value="{StaticResource FlickerModeControl}"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Slider}">
                <Setter Property="ContentTemplate" Value="{StaticResource SliderModeControl}"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Fusion}">
                <Setter Property="ContentTemplate" Value="{StaticResource FusionModeControl}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
      </ContentControl>

      <Button
        Grid.Column="1"
        extensions:IndependentSize.Margin="0,-8,0,0"
        Style="{StaticResource XStyle.Button.Icon.Small}"
        extensions:IconedButton.Icon="{StaticResource XCanvas.Quit}"
        VerticalAlignment="Top"
        Click="CloseCompareMenu"/>
    </Grid>
    
    <Rectangle
      Grid.Column="4"
      extensions:IndependentSize.Margin="10,0,0,0"
      Style="{DynamicResource BorderBottomRightVerticalStyle}"
      extensions:IndependentSize.Height="80"/>
  </Grid>
    
</UserControl>
