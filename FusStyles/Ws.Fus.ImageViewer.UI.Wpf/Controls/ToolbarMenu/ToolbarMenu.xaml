<UserControl
  x:Class="Ws.Fus.ImageViewer.UI.Wpf.Controls.ToolbarMenu.ToolbarMenu"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:extensions="http://schemas.insightec.com/wpf/"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:local="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.Controls.ToolbarMenu"
  xmlns:localBeh="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.Behaviors"
  xmlns:entities="clr-namespace:Ws.Fus.ImageViewer.Interfaces.Entities;assembly=Ws.Fus.ImageViewer.Interfaces"
  xmlns:sliderViews="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ImageModes.Slider.Views"
  xmlns:flickerViews="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ImageModes.Flicker.Views"
  xmlns:fusionViews="clr-namespace:Ws.Fus.ImageViewer.UI.Wpf.ImageModes.Fusion.Views"
  mc:Ignorable="d"
  x:Name="_thisToolbarMenu">
  
  <UserControl.Resources>
    <extensions:NullToVisibilityConverter x:Key="null2Vis"/>
    <extensions:BooleanToVisibilityConverter x:Key="XConverter.BooleanToVisibility"/>
    <extensions:InvertedBooleanToVisibilityConverter x:Key="XConverter.InverseBooleanToVisibility"/>
    <extensions:NullToVisibilityConverter x:Key="XConverter.NullToVisibility"/>

    <ControlTemplate x:Key="XControlTemplate.ToolbarMenuItem" TargetType="{x:Type local:ToolbarMenuItem}">
      <Border
        x:Name="HoverBorder"
        Grid.ColumnSpan="3"
        Margin="{TemplateBinding Margin}"
        extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
        Style="{StaticResource XStyle.Border.Hover}">
        <Grid Margin="{TemplateBinding Padding}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <Border
            x:Name="PressedBorder"
            Grid.ColumnSpan="3"
            Style="{StaticResource XStyle.Border.Pressed}"
            extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
            Opacity="0"/>
          <Viewbox
            x:Name="IconViewbox"
            Grid.Column="0"
            extensions:IndependentSize.Margin="8,0,7,0"
            Stretch="Uniform"
            Height="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource AncestorType={x:Type local:ToolbarMenuItem}}}"
            IsHitTestVisible="False">
            <ContentControl Content="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource TemplatedParent}}"/>
          </Viewbox>
          <TextBlock
            Grid.Column="1"
            extensions:IndependentSize.Margin="5,0"
            Text="{TemplateBinding Header}"
            Style="{StaticResource XStyle.TextBlock.Base}"
            FontSize="{StaticResource XDouble.FontSize.ToolTip}"
            Foreground="{TemplateBinding Foreground}"/>
          <ToggleButton
            Grid.Column="2"
            IsChecked="{TemplateBinding IsChecked}"
            Style="{StaticResource XStyle.ToggleButton.Switch}"
            Visibility="{Binding IsCheckable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </Grid>
      </Border>
    </ControlTemplate>

    <Style x:Key="XStyle.ToolbarMenuItem" TargetType="{x:Type local:ToolbarMenuItem}">
      <Setter Property="Template" Value="{StaticResource XControlTemplate.ToolbarMenuItem}"/>
      <Setter Property="extensions:ControlExtensions.ControlTheme" Value="Secondary"/>
      <Setter Property="extensions:IndependentSize.MinHeight" Value="40"/>
      <Setter Property="extensions:IndependentSize.Margin" Value="0"/>
      <Setter Property="extensions:IndependentSize.Padding" Value="3,3,6,3"/>
      <Setter Property="extensions:IconedButton.IconSize" Value="24"/>
      <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Foreground}"/>
      <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Background" Value="Transparent"/>
          <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
        </Trigger>
      </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="XControlTemplate.ToolbarMenuHeader" TargetType="{x:Type local:ToolbarMenuHeader}">
      <Grid Width="Auto" HorizontalAlignment="Center">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid Width="Auto" HorizontalAlignment="Center">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <ToggleButton
            x:Name="MenuOpenerButton"
            Grid.Row="0"
            Grid.Column="1"
            extensions:IndependentSize.Margin="3,0,0,0"
            IsChecked="{TemplateBinding IsSubmenuOpen}"
            Style="{StaticResource XStyle.ToggleButton.MenuOpener}"
            Click="MenuOpenerButton_Click"
            HorizontalAlignment="Left"
            Visibility="{TemplateBinding HasItems, Converter={StaticResource BooleanToVisibilityConverter}}"/>
          <Popup
            x:Name="Popup"
            Placement="Right"
            extensions:IndependentSize.VerticalOffset="28"
            extensions:IndependentSize.HorizontalOffset="-45"
            IsOpen="{TemplateBinding IsSubmenuOpen}"
            AllowsTransparency="True"
            Focusable="False"
            PopupAnimation="Fade">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Border
                x:Name="ArrowBorder"
                extensions:IndependentSize.Margin="20,0,0,0"
                extensions:IndependentSize.Width="25"
                extensions:IndependentSize.Height="45"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                Panel.ZIndex="5">
                <Grid>
                  <Border Height="1" VerticalAlignment="Bottom" Background="{StaticResource XBrush.Application.Background}" Margin="1,0,1,-1"/>
                  <Path
                    Margin="0,0,0,-1"
                    IsHitTestVisible="False"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Stretch="Uniform"
                    Data="{StaticResource XGeometry.Arrow.Down}"
                    Stroke="{StaticResource XBrush.Frame}"
                    StrokeThickness="1"
                    Fill="{StaticResource XBrush.Application.Background}"
                    RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                      <TransformGroup>
                        <RotateTransform Angle="180"/>
                      </TransformGroup>
                    </Path.RenderTransform>
                  </Path>
                </Grid>
              </Border>
              <Border
                Grid.Row="1"
                Background="{StaticResource XBrush.Application.Background}"
                BorderBrush="{StaticResource XBrush.Frame}"
                CornerRadius="{StaticResource XCornerRadius.Frame}"
                BorderThickness="{StaticResource XThickness.Frame}">
                <StackPanel IsItemsHost="True"/>
              </Border>
            </Grid>
          </Popup>
          <Button
            Grid.Row="0"
            Grid.Column="0"
            Command="{TemplateBinding Command}"
            CommandParameter="{TemplateBinding CommandParameter}"
            extensions:IconedButton.IconSize="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IconedButton.Icon="{TemplateBinding extensions:IconedButton.Icon}">
            <Button.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.Button.Icon}">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ToolbarHeaderType, RelativeSource={RelativeSource TemplatedParent}}" Value="Fire">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Button.Style>
          </Button>
          <ToggleButton
            Grid.Row="0"
            Grid.Column="0"
            IsChecked="{TemplateBinding IsActive}"
            Command="{TemplateBinding Command}"
            CommandParameter="{TemplateBinding CommandParameter}"
            extensions:IconedButton.IconSize="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IconedButton.Icon="{TemplateBinding extensions:IconedButton.Icon}">
            <ToggleButton.Style>
              <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ToggleButton.Icon}">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ToolbarHeaderType, RelativeSource={RelativeSource TemplatedParent}}" Value="Select">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>
          <ToggleButton
            Grid.Row="0"
            Grid.Column="0"
            IsChecked="{TemplateBinding IsActive}"
            Command="{TemplateBinding Command}"
            CommandParameter="{TemplateBinding CommandParameter}"
            extensions:IconedButton.IconSize="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IconedButton.ActiveIcon="{TemplateBinding extensions:IconedButton.ActiveIcon}"
            extensions:IconedButton.InactiveIcon="{TemplateBinding extensions:IconedButton.InactiveIcon}">
            <ToggleButton.Style>
              <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ToggleButton.ToggleIcon}">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ToolbarHeaderType, RelativeSource={RelativeSource TemplatedParent}}" Value="Toggle">
                    <Setter Property="Visibility" Value="Visible"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>
        </Grid>
        <TextBlock
          x:Name="HeaderTextBlock"
          Grid.Row="1"
          Text="{TemplateBinding Header}"
          HorizontalAlignment="Center"
          extensions:IndependentSize.MinWidth="70"
          TextAlignment="Center"
          Style="{StaticResource XStyle.TextBlock.Caption}"
          Foreground="{StaticResource XBrush.Button.IconButton.Caption}"/>
      </Grid>
      <ControlTemplate.Triggers>
        <DataTrigger Binding="{Binding IsEnabled}" Value="False">
          <Setter TargetName="HeaderTextBlock" Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
        </DataTrigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type local:ToolbarMenuHeader}" TargetType="{x:Type local:ToolbarMenuHeader}">
      <Setter Property="Template" Value="{StaticResource XControlTemplate.ToolbarMenuHeader}"/>
      <Setter Property="extensions:IconedButton.Icon" Value="{x:Null}"/>
      <Setter Property="extensions:IconedButton.ActiveIcon" Value="{x:Null}"/>
      <Setter Property="extensions:IconedButton.InactiveIcon" Value="{x:Null}"/>
      <Setter Property="extensions:IconedButton.IconSize" Value="46"/>
      <Setter Property="extensions:IndependentSize.Margin" Value="0,0,20,0"/>
    </Style>

    <Style
      x:Key="{x:Type local:ToolbarMenuHeaderCompare}"
      TargetType="{x:Type local:ToolbarMenuHeaderCompare}"
      BasedOn="{StaticResource {x:Type local:ToolbarMenuHeader}}"/>

    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
      <Setter Property="OverridesDefaultStyle" Value="True"/>
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Menu}">
            <StackPanel HorizontalAlignment="Left" Orientation="Horizontal" IsItemsHost="True"/>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

  </UserControl.Resources>
  
  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition/>
    </Grid.ColumnDefinitions>

    <Rectangle 
      Grid.Column="1" 
      Fill="{StaticResource XBrush.Button.Primary.Background.Disabled}" 
      Stretch="Fill" 
      Opacity=".6"
      Visibility="{Binding Visibility, ElementName=CompareMenu}"
      extensions:IndependentSize.Margin="-90,0,0,0"
      />

    <Menu x:Name="Menu" Grid.Column="0">
      <local:ToolbarMenuHeader
        x:Name="CycleMenuHeader"
        Header="Cycle"
        ToolbarHeaderType="Fire"
        Command="{Binding CycleCommand}"
        extensions:IconedButton.IconSize="{StaticResource XDouble.IconSize.SquareTemplate.Large}"
        extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Cycle}"/>

      <local:ToolbarMenuHeader
        Header="View"
        ToolbarHeaderType="Select"
        IsActive="False"
        CheckedCommandParameter ="{StaticResource XBoolean.True}"
        UncheckedCommandParameter ="{StaticResource XBoolean.False}"
        MemberOfMutuallyExclusiveGroup="True"
        ActivatedEvent="OnToolbarMenuHeaderActivated">
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="CommandParameter" Value="{StaticResource XBoolean.True}"/>
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem
          Header="Zoom"
          localBeh:UiModeEnter.Mode="Zoom"
          IsSelectable="True"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Zoom}"/>
        <local:ToolbarMenuItem
          Header="Pan"
          localBeh:UiModeEnter.Mode="Pan"
          IsSelectable="True"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Pan}"/>
        <local:ToolbarMenuItem
          Header="Window"
          localBeh:UiModeEnter.Mode="Windowing"
          IsSelectable="True"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Window}"/>
        <local:ToolbarMenuItem
          Header="Reset View"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.ResetView}"/>
        <local:ToolbarMenuItem
          Header="Center on Click"
          IsSelectable="True"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.CenterOnClick}"/>
        <local:ToolbarMenuItem
          Header="Center on Target"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.CenterOnTarget}"/>
        <local:ToolbarMenuItem
          Header="Screenshot"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.View.Screenshot}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeader
        Header="Draw"
        ToolbarHeaderType="Select"
        IsActive="False"
        CheckedCommandParameter ="{StaticResource XBoolean.True}"
        UncheckedCommandParameter ="{StaticResource XBoolean.False}"
        MemberOfMutuallyExclusiveGroup="True"
        ActivatedEvent="OnToolbarMenuHeaderActivated">
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="IsSelectable" Value="True"/>
            <Setter Property="CommandParameter" Value="{StaticResource XBoolean.True}"/>
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem
          Header="Line"
          localBeh:UiModeEnter.Mode="MeasurementDistanceOverlay"
          Command="{Binding LineCommand}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Line}"/>
        <local:ToolbarMenuItem
          Header="Area"
          localBeh:UiModeEnter.Mode="MeasurementAreaOverlay"
          Command="{Binding AreaCommand}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Area}"/>
        <local:ToolbarMenuItem
          Header="Angle"
          localBeh:UiModeEnter.Mode="MeasurementAngleOverlay"
          localBeh:UiModeEnter.SubMode="0"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Angle}"/>
        <local:ToolbarMenuItem
          Header="90 Angle"
          localBeh:UiModeEnter.Mode="MeasurementAngleOverlay"
          localBeh:UiModeEnter.SubMode="90"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Angle90}"/>
        <local:ToolbarMenuItem
          Header="Fiducial"
          localBeh:UiModeEnter.Mode="FiducialsOverlay"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Draw.Fiducial}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeader
        x:Name="OverlaysMenuHeader"
        Header="Overlays"
        ToolbarHeaderType="Toggle"
        IsActive="True"
        CheckedCommandParameter ="{StaticResource XBoolean.True}"
        UncheckedCommandParameter ="{StaticResource XBoolean.False}"
        extensions:IconedButton.ActiveIcon="{StaticResource XCanvas.Menu.Overlays.Shown}"
        extensions:IconedButton.InactiveIcon="{StaticResource XCanvas.Menu.Overlays.Hidden}">
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="IsCheckable" Value="True"/>
            <Setter Property="StaysOpenOnClick" Value="True"/>
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem
          Header="CrossReferenceLines"
          localBeh:UiModeShow.Mode="IntersectingSlicesOverlay"
          Command="{Binding OverlaysCommand}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.ReferenceLines}"/>
        <local:ToolbarMenuItem
          Header="Image Info"
          localBeh:UiModeShow.Mode="TextOverlay"
          Command="{Binding ImageInfoCommand}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Info}"/>
        <local:ToolbarMenuItem
          Header="Lines &amp; Areas"
          localBeh:UiModeShow.Modes="MeasurementDistanceOverlay,MeasurementAreaOverlay"
          Command="{Binding OverlaysCommand}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.LineArea}"/>
        <local:ToolbarMenuItem
          Header="Fiducials"
          localBeh:UiModeShow.Mode="FiducialsOverlay"
          Command="{Binding OverlaysCommand}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Fiducials}"/>
        <local:ToolbarMenuItem
          Header="Transducer"
          localBeh:UiModeShow.Mode="CalibrationDataOverlay"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Transducer}"/>
        <local:ToolbarMenuItem
          Header="Envelope"
          localBeh:UiModeShow.Mode="BathLimitsOverlay"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Envelope}"/>
        <local:ToolbarMenuItem
          Header="Ghost Cursor"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.GhostCursor}"/>
        <local:ToolbarMenuItem
          Header="Non-Pass Regions"
          localBeh:UiModeShow.Modes="MeshNPRAirOverlay,MeshNPROverlay,NPRPolygonsOverlay,RigidNPROverlay,MeshNPRMembraneFolds"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.NonPassRegions}"/>
        <local:ToolbarMenuItem
          Header="Skull"
          localBeh:UiModeShow.Mode="PreOpSegmentationOverlay"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Skull}"/>
        <local:ToolbarMenuItem
          Header="AC-PC Markers"
          localBeh:UiModeShow.Mode="ACPCOverlay"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.AcPc}"/>
        <local:ToolbarMenuItem
          Header="Active Elements"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.ActiveElements}"/>
        <local:ToolbarMenuItem
          Header="Disabled Elements"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.DisabledElements}"/>
        <local:ToolbarMenuItem
          Header="Tracts"
          localBeh:UiModeShow.Mode="Tractography"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Tracts}"/>
        <local:ToolbarMenuItem
          Header="Grid"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Overlays.Grid}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeader Header="Delete" ToolbarHeaderType="Fire">
        <local:ToolbarMenuHeader.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="CommandParameter" Value="{StaticResource XBoolean.True}"/>
          </Style>
        </local:ToolbarMenuHeader.Resources>
        <local:ToolbarMenuItem
          Header="Delete"
          IsSelectable="True"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Delete}"/>
        <local:ToolbarMenuItem
          Header="Delete All"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Delete}"/>
      </local:ToolbarMenuHeader>

      <local:ToolbarMenuHeaderCompare
        x:Name="CompareMenuHeader"
        Header="Compare"
        ToolbarHeaderType="Select"
        IsActive="False"
        UncheckedCommandParameter ="{x:Static entities:CompareMode.Simple}"
        MemberOfMutuallyExclusiveGroup="True"
        ActivatedEvent="OnToolbarMenuHeaderActivated"
        extensions:IndependentSize.Margin="0,0,5,0">
        <local:ToolbarMenuHeaderCompare.Resources>
          <Style TargetType="{x:Type local:ToolbarMenuItem}" BasedOn="{StaticResource XStyle.ToolbarMenuItem}">
            <Setter Property="IsSelectable" Value="True"/>
          </Style>
        </local:ToolbarMenuHeaderCompare.Resources>
        <local:ToolbarMenuItem
          Header="Swipe/Opacity"
          CommandParameter="{x:Static entities:CompareMode.Slider}"
          IsChecked="{Binding ImageModeController.Mode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static entities:CompareMode.Slider}, Mode=OneWay}"
        extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Compare.SwipeOpacity}"/>
        <local:ToolbarMenuItem
          Header="Flicker"
          CommandParameter="{x:Static entities:CompareMode.Flicker}"
          IsChecked="{Binding ImageModeController.Mode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static entities:CompareMode.Flicker}, Mode=OneWay}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Compare.Flicker}"/>
        <local:ToolbarMenuItem
          Header="Fusion"
          CommandParameter="{x:Static entities:CompareMode.Fusion}"
          IsChecked="{Binding ImageModeController.Mode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static entities:CompareMode.Fusion}, Mode=OneWay}"
          extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Compare.Fusion}"/>
      </local:ToolbarMenuHeaderCompare>
    </Menu>

    <Grid
      x:Name="CompareMenu" 
      Grid.Column="1" 
      Visibility="{Binding IsCompareModeOn, Converter={StaticResource BooleanToVisibilityConverter}}">
      <Grid.Resources>
        <DataTemplate x:Key ="SliderModeControl">
          <sliderViews:SliderModeControlView/>
        </DataTemplate>
        <DataTemplate x:Key ="FlickerModeControl" >
          <flickerViews:FlickerModeControlView/>
        </DataTemplate>
        <DataTemplate x:Key ="FusionModeControl">
          <fusionViews:FusionModeControlView/>
        </DataTemplate>
      </Grid.Resources>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>

      <ToggleButton 
        IsChecked="{Binding IsLinked}"
        Style="{StaticResource XStyle.ToggleButton.ToggleIconOverText}"
        extensions:IconedButton.ActiveIcon="{StaticResource XCanvas.Menu.Compare.LinkOn}"
        extensions:IconedButton.InactiveIcon="{StaticResource XCanvas.Menu.Compare.LinkOff}"
        Content="Linked"/>

      <ContentControl x:Name="CompareModeControl" Grid.Column="1" HorizontalAlignment="Left">
        <ContentControl.Style>
          <Style TargetType="{x:Type ContentControl}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Simple}">
                <Setter Property="ContentTemplate" Value="{StaticResource SliderModeControl}"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Flicker}">
                <Setter Property="ContentTemplate" Value="{StaticResource FlickerModeControl}"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Slider}">
                <Setter Property="ContentTemplate" Value="{StaticResource SliderModeControl}"/>
              </DataTrigger>
              <DataTrigger Binding="{Binding CompareMode, ElementName=CompareMenuHeader}" Value="{x:Static entities:CompareMode.Fusion}">
                <Setter Property="ContentTemplate" Value="{StaticResource FusionModeControl}"/>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
      </ContentControl>

      <Button 
        Grid.Column="2"
        extensions:IndependentSize.Margin="0,0,15,0"
        Style="{StaticResource XStyle.Button.IconOverText}"
        extensions:IconedButton.Icon="{StaticResource XCanvas.Menu.Compare.ClearImages}"
        Content="Clear Images"
        Command="{Binding ClearCompareStripsCommand}"/>
    </Grid>
  </Grid>
</UserControl>
