<ResourceDictionary 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:extensions="http://schemas.insightec.com/wpf/">

  <Border x:Key="JustABorder" Width="30" Height="30" Background="Green"/>

  <ControlTemplate x:Key="XControlTemplate.ButtonBase" TargetType="{x:Type ButtonBase}">
    <Border
      x:Name="BackgroundBorder"
      extensions:IndependentSize.Width="{TemplateBinding extensions:IndependentSize.Width}"
      extensions:IndependentSize.Height="{TemplateBinding extensions:IndependentSize.Height}"
      extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
      Style="{StaticResource XStyle.Border.Background}">
      <Border
        x:Name="HoverBorder"
        extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
        extensions:ControlExtensions.RunningPercentage="{TemplateBinding extensions:ControlExtensions.RunningPercentage}"
        Style="{StaticResource XStyle.Border.Hover}">
        <Grid>
          <Border
            x:Name="PressedBorder"
            Style="{StaticResource XStyle.Border.Pressed}"
            extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
            Opacity="0"/>
          <ContentPresenter
            x:Name="ContentPresenter"
            extensions:IndependentSize.Margin="1,0,1,1"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            IsHitTestVisible="False">
            <ContentPresenter.Resources>
              <Style TargetType="{x:Type TextBlock}">
                <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
              </Style>
            </ContentPresenter.Resources>
          </ContentPresenter>
        </Grid>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="0" To="1" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="1" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ButtonBase" TargetType="{x:Type ButtonBase}">
    <Setter Property="extensions:ControlExtensions.ControlTheme" Value="None"/>
    <Setter Property="extensions:IndependentSize.Height" Value="36"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase}"/>
    <Setter Property="FontFamily" Value="{StaticResource XFontFamily.Base}"/>
    <Setter Property="extensions:IndependentSize.FontSize" Value="16"/>
    <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
    <Setter Property="Foreground" Value="{Binding Path=(extensions:ControlExtensions.ControlTheme), RelativeSource={RelativeSource Self}, Converter={extensions:ControlThemeToForegroundConverter}}"/>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False"/>
          <Condition Property="extensions:ControlExtensions.ControlTheme" Value="Secondary"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{StaticResource XBrush.Button.Secondary.Foreground.Disabled}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>


  <!--Text With Side Icon-->

  <ControlTemplate x:Key="XControlTemplate.ButtonBase.TextWithSideIcon" TargetType="{x:Type ButtonBase}">
    <Border
      x:Name="BackgroundBorder"
      extensions:IndependentSize.Width="{TemplateBinding extensions:IndependentSize.Width}"
      extensions:IndependentSize.Height="{TemplateBinding extensions:IndependentSize.Height}"
      extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
      Style="{StaticResource XStyle.Border.Background}">
      <Border
        x:Name="HoverBorder"
        extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
        Style="{StaticResource XStyle.Border.Hover}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <Border
            x:Name="PressedBorder"
            Grid.ColumnSpan="3"
            Style="{StaticResource XStyle.Border.Pressed}"
            extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
            Opacity="0"/>
          <Viewbox
            x:Name="IconViewbox"
            Grid.Column="0"
            extensions:IndependentSize.Margin="10,0,7,0"
            Stretch="Uniform"
            Height="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
            IsHitTestVisible="False">
            <ContentControl Content="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"/>
          </Viewbox>
          <ContentPresenter
            x:Name="ContentPresenter"
            Grid.Column="1"
            Grid.ColumnSpan="2"
            extensions:IndependentSize.Margin="1,0,1,1"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            IsHitTestVisible="False">
            <ContentPresenter.Resources>
              <Style TargetType="{x:Type TextBlock}">
                <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
              </Style>
            </ContentPresenter.Resources>
          </ContentPresenter>
        </Grid>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="extensions:IconedButton.IconHorizontalAlignment" Value="Right">
        <Setter TargetName="IconViewbox" Property="Grid.Column" Value="2"/>
        <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="Center"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="0" To="1" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="1" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>


  <!--Icon With Text Underneath-->

  <ControlTemplate x:Key="XControlTemplate.ButtonBase.IconWithTextUnderneath" TargetType="{x:Type ButtonBase}">
    <Grid x:Name="MainGrid" Background="{StaticResource XBrush.AlmostTransparent}" MaxWidth="{TemplateBinding MaxWidth}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Border
        x:Name="BackgroundBorder"
        Grid.Row="0"
        extensions:IndependentSize.Height="36"
        extensions:IndependentSize.Width="36"
        HorizontalAlignment="Center"
        Style="{StaticResource XStyle.Border}"
        Background="{TemplateBinding Background}"/>
      <Border
        x:Name="HoverBorder"
        Grid.Row="0"
        Height="{Binding ActualHeight, ElementName=BackgroundBorder}"
        Width="{Binding ActualWidth, ElementName=BackgroundBorder}"
        HorizontalAlignment="{Binding HorizontalAlignment, ElementName=BackgroundBorder}"
        extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
        Style="{StaticResource XStyle.Border.Hover}">
        <Border
          x:Name="PressedBorder"
          Height="{Binding ActualHeight, ElementName=BackgroundBorder}"
          Width="{Binding ActualWidth, ElementName=BackgroundBorder}"
          HorizontalAlignment="{Binding HorizontalAlignment, ElementName=BackgroundBorder}"
          Style="{StaticResource XStyle.Border.Pressed}"
          extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
          Opacity="0"/>
      </Border>
      <Viewbox
        Stretch="Uniform"
        Height="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
        Width="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
        IsHitTestVisible="False">
        <ContentControl Content="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"/>
      </Viewbox>
      <ContentPresenter
        x:Name="ContentPresenter"
        Grid.Row="1"
        extensions:IndependentSize.Margin="0,0,0,2"
        IsHitTestVisible="False"
        HorizontalAlignment="Center"
        VerticalAlignment="Top">
        <ContentPresenter.Resources>
          <Style TargetType="{x:Type TextBlock}">
            <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
            <Setter Property="MaxWidth" Value="{Binding ActualWidth, ElementName=MainGrid}"/>
            <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
            <Setter Property="TextAlignment" Value="Center"/>
          </Style>
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="0" To="1" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="1" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  
  <Style x:Key="XStyle.ButtonBase.IconWithTextUnderneath" TargetType="{x:Type ButtonBase}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase.IconWithTextUnderneath}"/>
    <Setter Property="extensions:ControlExtensions.ControlTheme" Value="Secondary"/>
    <Setter Property="extensions:IconedButton.Icon" Value="{StaticResource JustABorder}"/>
    <Setter Property="extensions:IconedButton.IconSize" Value="28"/>
    <Setter Property="extensions:IndependentSize.MinHeight" Value="66"/>
    <Setter Property="extensions:IndependentSize.MaxHeight" Value="80"/>
    <Setter Property="extensions:IndependentSize.MaxWidth" Value="100"/>
    <Setter Property="FontFamily" Value="{StaticResource XFontFamily.Base}"/>
    <Setter Property="extensions:IndependentSize.FontSize" Value="14"/>
    <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
    <Setter Property="Foreground" Value="{StaticResource XBrush.Button.IconButton.Caption}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource XBrush.Button.Secondary.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>