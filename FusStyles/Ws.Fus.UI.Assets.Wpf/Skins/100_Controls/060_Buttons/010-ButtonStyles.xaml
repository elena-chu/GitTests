<ResourceDictionary 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:extensions="http://schemas.insightec.com/wpf/">

  <!--Base-->
  <Style x:Key="XStyle.ButtonBase.Text" TargetType="{x:Type ButtonBase}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="extensions:IndependentSize.Height" Value="{StaticResource XDouble.Height.Control.Default}"/>
    <Setter Property="extensions:IndependentSize.MinWidth" Value="150"/>
    <Setter Property="FontFamily" Value="{StaticResource XFontFamily.Base}"/>
    <Setter Property="extensions:IndependentSize.FontSize" Value="{StaticResource XDouble.FontSize.Base}"/>
    <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
  </Style>

  <Style x:Key="XStyle.ButtonBase.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource XStyle.ButtonBase.Text}">
    <Setter Property="Foreground" Value="{StaticResource XBrush.Button.Primary.Foreground}"/>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{StaticResource XBrush.Button.Primary.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="XStyle.ButtonBase.Secondary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource XStyle.ButtonBase.Text}">
    <Setter Property="Foreground" Value="{StaticResource XBrush.Button.Secondary.Foreground}"/>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="XStyle.ButtonBase.Safety" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource XStyle.ButtonBase.Secondary}">
    <Setter Property="extensions:IndependentSize.Height" Value="NaN"/>
  </Style>

  <!--Text-->
  <ControlTemplate x:Key="XControlTemplate.Button.Primary" TargetType="{x:Type Button}">
    <Border extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}" Style="{StaticResource XStyle.Border.HoverAndPress.Primary}">
      <ContentPresenter
        extensions:IndependentSize.Margin="1,0,1,1"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        IsHitTestVisible="False">
        <ContentPresenter.Resources>
          <Style TargetType="{x:Type TextBlock}">
            <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
          </Style>
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Border>
  </ControlTemplate>

  <Style x:Key="XStyle.Button.Primary" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.Primary}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.Button.Primary}"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.Button.Secondary" TargetType="{x:Type Button}">
    <Border extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}" Style="{StaticResource XStyle.Border.HoverAndPress.Secondary}">
      <ContentPresenter
        extensions:IndependentSize.Margin="1,0,1,1"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        IsHitTestVisible="False">
        <ContentPresenter.Resources>
          <Style TargetType="{x:Type TextBlock}">
            <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
          </Style>
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Border>
  </ControlTemplate>

  <Style x:Key="XStyle.Button.Secondary" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.Secondary}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.Button.Secondary}"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.Button.TransparentToSafety" TargetType="{x:Type Button}">
    <Border extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}" Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSafety}">
      <ContentPresenter
        extensions:IndependentSize.Margin="1,0,1,1"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        IsHitTestVisible="False">
        <ContentPresenter.Resources>
          <Style TargetType="{x:Type TextBlock}">
            <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
          </Style>
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Border>
  </ControlTemplate>

  <Style x:Key="XStyle.Button.TransparentToSafety" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.Safety}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.Button.TransparentToSafety}"/>
  </Style>

  <!--Transparent Button with MouseOver-->
  <Style x:Key="XStyle.Button.Transparent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource XStyle.ButtonBase.Text}">
    <Setter Property="Margin" Value="0" />
    <Setter Property="Height" Value="NaN" />
    <Setter Property="extensions:IndependentSize.Height" Value="NaN" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border
              Padding="{TemplateBinding Padding}"
              extensions:IndependentSize.Height="{TemplateBinding Height}"
              extensions:IndependentSize.Width="{TemplateBinding Width}"
              extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
              extensions:IndependentSize.BorderThickness="0"
              Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSecondary}">
            <ContentPresenter x:Name="ContentPr" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Stretch"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value=".3" TargetName="ContentPr"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Text With Side Icon-->
  <ControlTemplate x:Key="XControlTemplate.Button.Secondary.TextWithSideIcon" TargetType="{x:Type Button}">
    <Border
      extensions:IndependentSize.Width="{TemplateBinding extensions:IndependentSize.Width}"
      extensions:IndependentSize.Height="{TemplateBinding extensions:IndependentSize.Height}"
      extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
      Style="{StaticResource XStyle.Border.HoverAndPress.Secondary}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Viewbox
            x:Name="IconViewbox"
            Grid.Column="0"
            extensions:IndependentSize.Margin="8,0,7,0"
            Stretch="Uniform"
            extensions:IndependentSize.Height="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
            IsHitTestVisible="False">
          <ContentControl Content="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"/>
        </Viewbox>
        <ContentPresenter
            x:Name="ContentPresenter"
            Grid.Column="1"
            extensions:IndependentSize.Margin="1,0,8,1"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            IsHitTestVisible="False">
          <ContentPresenter.Resources>
            <Style TargetType="{x:Type TextBlock}">
              <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
            </Style>
          </ContentPresenter.Resources>
        </ContentPresenter>
      </Grid>
    </Border>
  </ControlTemplate>

  <Style x:Key="XStyle.Button.Secondary.TextWithSideIcon" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.Secondary}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.Button.Secondary.TextWithSideIcon}"/>
    <Setter Property="extensions:IconedButton.IconSize" Value="22"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.ToggleButton.TextWithSideIcon" TargetType="{x:Type ToggleButton}">
    <Border
      Width="{TemplateBinding Width}"
      Height="{TemplateBinding Height}"
      extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
      Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSecondary}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Border
          Grid.Row="0"
          HorizontalAlignment="Center"
          extensions:IndependentSize.Width="{StaticResource XDouble.Height.Control.Default}"
          extensions:IndependentSize.Height="{StaticResource XDouble.Height.Control.Default}"
          extensions:ControlExtensions.IsActive="{TemplateBinding IsChecked}"
          Style="{StaticResource XStyle.Border.Active.Secondary}">
          <Viewbox
            x:Name="IconViewbox"
            Grid.Column="0"
            Stretch="Uniform"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Height="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
            IsHitTestVisible="False">
            <ContentControl Content="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"/>
          </Viewbox>
        </Border>
        <ContentPresenter
            x:Name="ContentPresenter"
            Grid.Column="1"
            extensions:IndependentSize.Margin="6,0,8,1"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            IsHitTestVisible="False">
          <ContentPresenter.Resources>
            <Style TargetType="{x:Type TextBlock}">
              <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
            </Style>
          </ContentPresenter.Resources>
        </ContentPresenter>
      </Grid>
    </Border>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.TextWithSideIcon" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase.Secondary}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ToggleButton.TextWithSideIcon}"/>
    <Setter Property="extensions:IconedButton.IconSize" Value="22"/>
  </Style>


  <!--Plus / Exit-->
  <ControlTemplate x:Key="XControlTemplate.ButtonBase.SingleLetter" TargetType="{x:Type ButtonBase}">
    <Border
      Padding="{TemplateBinding Padding}"
      Height="{TemplateBinding Height}"
      Width="{TemplateBinding Height}"
      extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
      extensions:IndependentSize.BorderThickness="{StaticResource XThickness.Frame}"
      BorderBrush="{TemplateBinding Foreground}"
      Style="{StaticResource XStyle.Border.HoverAndPress.Secondary}">
      <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
    </Border>
  </ControlTemplate>

  <Style x:Key="XStyle.ButtonBase.SingleLetter" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource XStyle.ButtonBase.Secondary}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase.SingleLetter}"/>
    <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Active}"/>
    <Setter Property="extensions:IndependentSize.FontSize" Value="20"/>
    <Setter Property="extensions:IndependentSize.Height" Value="{StaticResource XDouble.Height.Control.Small}"/>
    <Setter Property="extensions:IndependentSize.Width" Value="{Binding (extensions:IndependentSize.Height), RelativeSource={RelativeSource Self}}"/>
    <Setter Property="extensions:IndependentSize.MinWidth" Value="0"/>
    <Setter Property="extensions:IndependentSize.Padding" Value="0,-1,0,1"/>
  </Style>

  <Style x:Key="XStyle.Button.SingleLetter.Exit" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.SingleLetter}">
    <Setter Property="Content" Value="&#x00D7;"/>
    <Setter Property="extensions:IndependentSize.Height" Value="20"/>
    <Setter Property="extensions:IndependentSize.FontSize" Value="18"/>
    <Setter Property="extensions:IndependentSize.Padding" Value="0,-2.5,0,2.5"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.ToggleButton.SingleLetter.Chevron" TargetType="{x:Type ToggleButton}">
    <ControlTemplate.Resources>
      <Geometry x:Key="LGeometry.FlatLine">M 10.134445,0.28271351 L 20.134445,0.28271351</Geometry>
    </ControlTemplate.Resources>
    <Border
      Padding="{TemplateBinding Padding}"
      Height="{TemplateBinding Height}"
      Width="{TemplateBinding Height}"
      extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
      extensions:IndependentSize.BorderThickness="{StaticResource XThickness.Frame}"
      BorderBrush="{TemplateBinding Foreground}"
      Style="{StaticResource XStyle.Border.HoverAndPress.Secondary}">
      <Border x:Name="ChevronBorder" extensions:IndependentSize.MaxWidth="13" HorizontalAlignment="Center">
        <Path
          extensions:IndependentSize.Margin="0,2,0,0"
          VerticalAlignment="Center"
          Stroke="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
          RenderTransformOrigin="0.5,0.5">
          <Path.RenderTransform>
            <RotateTransform x:Name="ChevronRotateTransform" Angle="0"/>
          </Path.RenderTransform>
          <Path.Style>
            <Style TargetType="{x:Type Path}" BasedOn="{StaticResource XStyle.Path.Chevron}">
              <Setter Property="Data" Value="{DynamicResource XGeometry.Chevron.Down}"/>
              <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Data" Value="{DynamicResource LGeometry.FlatLine}"/>
                </Trigger>
              </Style.Triggers>
            </Style>
          </Path.Style>
        </Path>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="extensions:IndependentSize.Margin" Value="0,0,0,2" TargetName="ChevronBorder"/>
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.SingleLetter.Chevron" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase.SingleLetter}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ToggleButton.SingleLetter.Chevron}"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.Button.SingleLetter.States" TargetType="{x:Type Button}">
    <ControlTemplate.Resources>
      <Thickness x:Key="LThickness.BorderMargins">10</Thickness>
    </ControlTemplate.Resources>
    <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Height}">
      <Border
        x:Name="RippleBorder"
        extensions:IndependentSize.Margin="{StaticResource LThickness.BorderMargins}"
        Style="{StaticResource XStyle.Border.Ripple}"
        extensions:ControlExtensions.IsActive="False"
        Visibility="Hidden"/>
      <Border
        x:Name="HoverAndPressBorder"
        extensions:IndependentSize.Margin="{StaticResource LThickness.BorderMargins}"
        Padding="{TemplateBinding Padding}"
        extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
        extensions:ControlExtensions.ControlState="{TemplateBinding extensions:ControlExtensions.ControlState}"
        extensions:IndependentSize.BorderThickness="{StaticResource XThickness.Frame}"
        Style="{StaticResource XStyle.Border.HoverAndPress.Secondary}"
        BorderBrush="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
      </Border>
      <Control
        x:Name="BusyControl"
        extensions:IndependentSize.Margin="{StaticResource LThickness.BorderMargins}"
        Style="{StaticResource XStyle.Control.CircularWipeBorder}"
        extensions:ControlExtensions.IsActive="False"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="extensions:ControlExtensions.ControlState" Value="{x:Static extensions:ControlState.CallToAction}">
        <Setter TargetName="RippleBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="RippleBorder" Property="extensions:ControlExtensions.IsActive" Value="True"/>
        <Setter TargetName="HoverAndPressBorder" Property="BorderBrush" Value="{StaticResource XBrush.Button.Secondary.Foreground}"/>
      </Trigger>
      <Trigger Property="extensions:ControlExtensions.ControlState" Value="{x:Static extensions:ControlState.Busy}">
        <Setter TargetName="HoverAndPressBorder" Property="IsEnabled" Value="False"/>
        <Setter TargetName="BusyControl" Property="extensions:ControlExtensions.IsActive" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.Button.SingleLetter.Plus" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.SingleLetter}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.Button.SingleLetter.States}"/>
    <Setter Property="extensions:IndependentSize.Height" Value="50"/>
    <Setter Property="Content" Value="+"/>
  </Style>

  <!--Switch Button-->
  <ControlTemplate x:Key="XControlTemplate.ToggleButton.Switch" TargetType="{x:Type ToggleButton}">
    <Border Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{StaticResource XBrush.AlmostTransparent}">
      <ContentControl
        x:Name="Switch"
        Grid.Row="0"
        Grid.Column="1"
        extensions:IndependentSize.Margin="3,0,0,0"
        extensions:IndependentSize.Height="20"
        Style="{StaticResource XStyle.ContentControl.Switch}"
        extensions:IconedButton.IconHorizontalAlignment="{Binding (extensions:IconedButton.IconHorizontalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}"
        extensions:ControlExtensions.Hover="{Binding Path=(extensions:ControlExtensions.Hover), RelativeSource={RelativeSource TemplatedParent}}"
        />
    </Border>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.Switch" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ToggleButton.Switch}"/>
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="extensions:IconedButton.IconHorizontalAlignment" Value="Right"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="False">
        <Setter Property="extensions:IconedButton.IconHorizontalAlignment" Value="Left"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="extensions:ControlExtensions.Hover" Value="True"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!--Chevron-->
  <ControlTemplate x:Key="XControlTemplate.RepeatButton.Spinner" TargetType="{x:Type RepeatButton}">
    <Border Background="{StaticResource XBrush.AlmostTransparent}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
      <Grid>
        <Border
          x:Name="TopBottomChevronBorder"
          Padding="0"
          extensions:IndependentSize.Height="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          extensions:IndependentSize.Width="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Visibility="{Binding (extensions:ControlExtensions.Direction), RelativeSource={RelativeSource TemplatedParent}, Converter={extensions:EnumToVisibilityConverter}, ConverterParameter='Top|Bottom'}">
          <Path
            extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}"
            Style="{StaticResource XStyle.Path.Chevron}"
            RenderTransformOrigin="0.5,0.5">
            <Path.RenderTransform>
              <ScaleTransform x:Name="TopBottomChevronScaleTransform" ScaleX="1" ScaleY="1"/>
            </Path.RenderTransform>
          </Path>
        </Border>
        <Border
          x:Name="LeftRightChevronBorder"
          Padding="0"
          extensions:IndependentSize.Height="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          extensions:IndependentSize.Width="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Visibility="{Binding (extensions:ControlExtensions.Direction), RelativeSource={RelativeSource TemplatedParent}, Converter={extensions:EnumToVisibilityConverter}, ConverterParameter='Left|Right'}">
          <Path
            extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}"
            Style="{StaticResource XStyle.Path.Chevron}"
            RenderTransformOrigin="0.5,0.5">
            <Path.RenderTransform>
              <TransformGroup>
                <RotateTransform Angle="90"/>
                <ScaleTransform x:Name="LeftRightChevronScaleTransform" ScaleX="1" ScaleY="1"/>
              </TransformGroup>
            </Path.RenderTransform>
          </Path>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="extensions:ControlExtensions.Direction" Value="Top">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TopBottomChevronScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="-1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TopBottomChevronScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="extensions:ControlExtensions.Direction" Value="Right">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="LeftRightChevronScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="-1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="LeftRightChevronScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.RepeatButton.Spinner" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.RepeatButton.Spinner}"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.ToggleButton.ChevonRotate180" TargetType="{x:Type ToggleButton}">
    <Border 
      Height="{TemplateBinding Height}"
      Width="{TemplateBinding Width}"
      Style="{StaticResource XStyle.Border.Active.Secondary}"
      extensions:ControlExtensions.IsActive="{TemplateBinding IsChecked}">
      <Border
        Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSecondary}"
        extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
        extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}">
        <Border Grid.Column="1" extensions:IndependentSize.MaxWidth="13" HorizontalAlignment="Center">
          <Path Style="{StaticResource XStyle.Path.Chevron}" extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}">
            <Path.RenderTransform>
              <RotateTransform x:Name="ChevronRotateTransform"/>
            </Path.RenderTransform>
          </Path>
        </Border>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.ChevonRotate180" TargetType="{x:Type ToggleButton}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ToggleButton.ChevonRotate180}"/>
    <Setter Property="extensions:IndependentSize.Width" Value="20"/>
    <Setter Property="extensions:IndependentSize.Padding" Value="4"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.ToggleButton.ChevonRotate90" TargetType="{x:Type ToggleButton}">
    <Border
      Height="{TemplateBinding Height}"
      Width="{TemplateBinding Width}"
      Style="{StaticResource XStyle.Border.Active.Secondary}"
      extensions:ControlExtensions.IsActive="{TemplateBinding IsChecked}">
      <Border
        Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSecondary}"
        extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
        extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}">
        <Border Grid.Column="1" extensions:IndependentSize.MaxWidth="13" HorizontalAlignment="Center">
          <Path Style="{StaticResource XStyle.Path.Chevron}" extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}">
            <Path.RenderTransform>
              <RotateTransform x:Name="ChevronRotateTransform"/>
            </Path.RenderTransform>
          </Path>
        </Border>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="-90" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.ChevonRotate90" TargetType="{x:Type ToggleButton}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ToggleButton.ChevonRotate90}"/>
    <Setter Property="extensions:IndependentSize.Width" Value="20"/>
    <Setter Property="extensions:IndependentSize.Padding" Value="4"/>
  </Style>

  <ControlTemplate x:Key="XControlTemplate.RepeatButton.Chevron" TargetType="{x:Type RepeatButton}">
    <Border
      Style="{StaticResource XStyle.Border.Hover.TransparentToFadedSecondary}"
      extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}">
      <Grid>
        <Border
          x:Name="TopBottomChevronBorder"
          Padding="0"
          extensions:IndependentSize.Height="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          extensions:IndependentSize.Width="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Visibility="{Binding (extensions:ControlExtensions.Direction), RelativeSource={RelativeSource TemplatedParent}, Converter={extensions:EnumToVisibilityConverter}, ConverterParameter='Top|Bottom'}">
          <Path
            extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
            Style="{StaticResource XStyle.Path.Chevron.Press}"
            RenderTransformOrigin="0.5,0.5">
            <Path.RenderTransform>
              <ScaleTransform x:Name="TopBottomChevronScaleTransform" ScaleX="1" ScaleY="1"/>
            </Path.RenderTransform>
          </Path>
        </Border>
        <Border
          x:Name="LeftRightChevronBorder"
          Padding="0"
          extensions:IndependentSize.Height="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          extensions:IndependentSize.Width="{Binding (extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Visibility="{Binding (extensions:ControlExtensions.Direction), RelativeSource={RelativeSource TemplatedParent}, Converter={extensions:EnumToVisibilityConverter}, ConverterParameter='Left|Right'}">
          <Path
            extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
            Style="{StaticResource XStyle.Path.Chevron.Press}"
            RenderTransformOrigin="0.5,0.5">
            <Path.RenderTransform>
              <TransformGroup>
                <RotateTransform Angle="90"/>
                <ScaleTransform x:Name="LeftRightChevronScaleTransform" ScaleX="1" ScaleY="1"/>
              </TransformGroup>
            </Path.RenderTransform>
          </Path>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="extensions:ControlExtensions.Direction" Value="Top">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TopBottomChevronScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="-1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TopBottomChevronScaleTransform" Storyboard.TargetProperty="ScaleY">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="extensions:ControlExtensions.Direction" Value="Right">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="LeftRightChevronScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="-1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="LeftRightChevronScaleTransform" Storyboard.TargetProperty="ScaleX">
                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.RepeatButton.Chevron" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="extensions:IconedButton.IconSize" Value="20"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.RepeatButton.Chevron}"/>
  </Style>


  <!--Expander-->
  <ControlTemplate x:Key="XControlTemplate.ToggleButton.Expander" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <Border Grid.ColumnSpan="2" extensions:IndependentSize.Margin="-3" Background="{StaticResource XBrush.AlmostTransparent}"/>
      <Border Grid.Column="0" extensions:IndependentSize.Margin="2,0,2,0" extensions:IndependentSize.MaxWidth="12" HorizontalAlignment="Center">
        <Path
          x:Name="GuillemetPath"
          IsHitTestVisible="False"
          Stretch="Uniform"
          Data="{StaticResource XGeometry.Guillemet.Down}"
          Stroke="{TemplateBinding Foreground}"
          extensions:IndependentSize.StrokeThickness="1.3"
          RenderTransformOrigin="0.5,0.5">
          <Path.RenderTransform>
            <RotateTransform x:Name="GuillemetRotateTransform" Angle="180"/>
          </Path.RenderTransform>
        </Path>
      </Border>
      <ContentPresenter
        Grid.Column="1"
        extensions:IndependentSize.Margin="6,0,8,0"
        HorizontalAlignment="Left"
        RecognizesAccessKey="True"
        SnapsToDevicePixels="True"
        VerticalAlignment="Center">
        <ContentPresenter.Resources>
          <Style TargetType="TextBlock" BasedOn="{StaticResource XStyle.TextBlock.ToolTip}" />
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="GuillemetRotateTransform" Storyboard.TargetProperty="Angle" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="GuillemetRotateTransform" Storyboard.TargetProperty="Angle" To="180" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="GuillemetPath" Storyboard.TargetProperty="Stroke.Color">
              <ColorAnimation To="{StaticResource XColor.Application.Active}" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="GuillemetPath" Storyboard.TargetProperty="Stroke.Color">
              <ColorAnimation To="{StaticResource XColor.Application.Foreground}" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.Expander" TargetType="{x:Type ToggleButton}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ToggleButton.Expander}"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Foreground}"/>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!--Solitary Icon-->
  <ControlTemplate x:Key="XControlTemplate.ButtonBase.Icon" TargetType="{x:Type ButtonBase}">
    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
      <Border
        HorizontalAlignment="Center"
        extensions:IndependentSize.Width="{TemplateBinding extensions:IndependentSize.Width}"
        extensions:IndependentSize.Height="{TemplateBinding extensions:IndependentSize.Height}"
        extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
        Style="{StaticResource XStyle.Border.Active.Secondary}"/>
      <Border
        HorizontalAlignment="Center"
        extensions:IndependentSize.Width="{TemplateBinding extensions:IndependentSize.Width}"
        extensions:IndependentSize.Height="{TemplateBinding extensions:IndependentSize.Height}"
        extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
        Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSecondary}">
        <Viewbox
          IsHitTestVisible="False"
          Stretch="Uniform"
          extensions:IndependentSize.Height="{TemplateBinding extensions:IconedButton.IconSize}"
          extensions:IndependentSize.Width="{TemplateBinding extensions:IconedButton.IconSize}">
          <Grid>
            <ContentControl
              x:Name="ActiveIconContentControl"
              Content="{TemplateBinding extensions:IconedButton.ActiveIcon}"
              extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
              Visibility="{Binding (extensions:ControlExtensions.IsActive), RelativeSource={RelativeSource Self}, Converter={StaticResource XConverter.BooleanToVisibility.Hidden}}"/>
            <ContentControl
              x:Name="InactiveIconContentControl"
              Content="{TemplateBinding extensions:IconedButton.InactiveIcon}"
              extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
              Visibility="{Binding (extensions:ControlExtensions.IsActive), RelativeSource={RelativeSource Self}, Converter={StaticResource XConverter.InverseBooleanToVisibility.Hidden}}"/>
          </Grid>
        </Viewbox>
      </Border>
    </Grid>
  </ControlTemplate>

  <Style x:Key="XStyle.ButtonBase.Icon" TargetType="{x:Type ButtonBase}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase.Icon}"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="extensions:ControlExtensions.IsActive" Value="False"/>
    <Setter Property="extensions:IconedButton.IconSize" Value="25"/>
    <Setter Property="extensions:IndependentSize.Height" Value="{StaticResource XDouble.Height.Control.Default}"/>
    <Setter Property="extensions:IndependentSize.Width" Value="{StaticResource XDouble.Height.Control.Default}"/>
  </Style>

  <Style x:Key="XStyle.Button.Icon" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.Icon}">
    <Setter Property="extensions:IconedButton.InactiveIcon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource Self}}"/>
  </Style>

  <Style x:Key="XStyle.Button.Icon.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.Button.Icon}">
    <Setter Property="extensions:IconedButton.IconSize" Value="20"/>
    <Setter Property="extensions:IndependentSize.Height" Value="{StaticResource XDouble.Height.Control.Small}"/>
    <Setter Property="extensions:IndependentSize.Width" Value="{StaticResource XDouble.Height.Control.Small}"/>
  </Style>

  <Style x:Key="XStyle.ToggleButton.Icon" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase.Icon}">
    <Setter Property="extensions:IconedButton.InactiveIcon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource Self}}"/>
    <Setter Property="extensions:IconedButton.ActiveIcon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource Self}}"/>
    <Setter Property="extensions:ControlExtensions.IsActive" Value="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
  </Style>

  <Style x:Key="XStyle.ToggleButton.ToggleIcon" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase.Icon}">
    <Setter Property="extensions:ControlExtensions.IsActive" Value="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
  </Style>

  <Style x:Key="XStyle.ToggleButton.Icon.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ToggleButton.Icon}">
    <Setter Property="extensions:IconedButton.IconSize" Value="20"/>
    <Setter Property="extensions:IndependentSize.Height" Value="{StaticResource XDouble.Height.Control.Small}"/>
    <Setter Property="extensions:IndependentSize.Width" Value="{StaticResource XDouble.Height.Control.Small}"/>
  </Style>


  <!--Icon over Text-->
  <ControlTemplate x:Key="XControlTemplate.ButtonBase.IconOverText" TargetType="{x:Type ButtonBase}">
    <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Background="{StaticResource XBrush.AlmostTransparent}" Height="{TemplateBinding Height}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border
        Grid.Row="0"
        HorizontalAlignment="Center"
        extensions:IndependentSize.Width="{StaticResource XDouble.Height.Control.Default}"
        extensions:IndependentSize.Height="{StaticResource XDouble.Height.Control.Default}"
        extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
        Style="{StaticResource XStyle.Border.Active.Secondary}"/>
      <Border
        Grid.Row="0"
        HorizontalAlignment="Center"
        extensions:IndependentSize.Width="{StaticResource XDouble.Height.Control.Default}"
        extensions:IndependentSize.Height="{StaticResource XDouble.Height.Control.Default}"
        extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
        extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}"
        Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSecondary}">
        <Viewbox
          IsHitTestVisible="False"
          Stretch="Uniform"
          extensions:IndependentSize.Height="{TemplateBinding extensions:IconedButton.IconSize}"
          extensions:IndependentSize.Width="{TemplateBinding extensions:IconedButton.IconSize}">
          <Grid>
            <ContentControl
              x:Name="ActiveIconContentControl"
              Content="{TemplateBinding extensions:IconedButton.ActiveIcon}"
              extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
              Visibility="{Binding (extensions:ControlExtensions.IsActive), RelativeSource={RelativeSource Self}, Converter={StaticResource XConverter.BooleanToVisibility.Hidden}}"/>
            <ContentControl
              x:Name="InactiveIconContentControl"
              Content="{TemplateBinding extensions:IconedButton.InactiveIcon}"
              extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
              Visibility="{Binding (extensions:ControlExtensions.IsActive), RelativeSource={RelativeSource Self}, Converter={StaticResource XConverter.InverseBooleanToVisibility.Hidden}}"/>
          </Grid>
        </Viewbox>
      </Border>
      <ContentPresenter Grid.Row="1">
        <ContentPresenter.Resources>
          <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.Caption}">
            <Setter Property="Background" Value="{StaticResource XBrush.AlmostTransparent}"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="{Binding (extensions:ToolTipExtension.AutoToolTip), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Setter Property="Foreground" Value="{StaticResource XBrush.Button.IconButton.Caption}"/>
            <Style.Triggers>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
              </Trigger>
            </Style.Triggers>
          </Style>
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Grid>
  </ControlTemplate>

  <Style x:Key="XStyle.ButtonBase.IconOverText" TargetType="{x:Type ButtonBase}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase.IconOverText}"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="extensions:ControlExtensions.IsActive" Value="False"/>
    <Setter Property="extensions:IconedButton.IconSize" Value="25"/>
    <Setter Property="extensions:IndependentSize.Width" Value="{StaticResource XDouble.Width.IconOverText}"/>
    <Setter Property="extensions:IndependentSize.Height" Value="{StaticResource XDouble.Height.IconOverText.OneLine}"/>
    <!--To show two text lines below button, set IndependentSize.Height to XDouble.Height.IconOverText.TwoLines on individual button-->
  </Style>

  <Style x:Key="XStyle.Button.IconOverText" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase.IconOverText}">
    <Setter Property="extensions:IconedButton.InactiveIcon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource Self}}"/>
  </Style>

  <Style x:Key="XStyle.ToggleButton.IconOverText" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase.IconOverText}">
    <Setter Property="extensions:IconedButton.InactiveIcon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource Self}}"/>
    <Setter Property="extensions:IconedButton.ActiveIcon" Value="{Binding (extensions:IconedButton.Icon), RelativeSource={RelativeSource Self}}"/>
    <Setter Property="extensions:ControlExtensions.IsActive" Value="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
  </Style>

  <Style x:Key="XStyle.ToggleButton.ToggleIconOverText" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase.IconOverText}">
    <Setter Property="extensions:ControlExtensions.IsActive" Value="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
  </Style>


  <!--Icon and Switch over Text-->
  <ControlTemplate x:Key="XControlTemplate.ToggleButton.IconAndSwitchOverText" TargetType="{x:Type ToggleButton}">
    <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Background="{StaticResource XBrush.AlmostTransparent}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition extensions:IndependentSize.ColumnWidth="10"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <Grid 
        Grid.Row="0" 
        Grid.Column="0" 
        HorizontalAlignment="Right" 
        VerticalAlignment="Center">
        <Border
          extensions:IndependentSize.Width="{StaticResource XDouble.Height.Control.Default}"
          extensions:IndependentSize.Height="{StaticResource XDouble.Height.Control.Default}"
          extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
          Style="{StaticResource XStyle.Border.Active.Secondary}"/>
        <Border
          extensions:IndependentSize.Width="{StaticResource XDouble.Height.Control.Default}"
          extensions:IndependentSize.Height="{StaticResource XDouble.Height.Control.Default}">
          <Viewbox
            IsHitTestVisible="False"
            Stretch="Uniform"
            extensions:IndependentSize.Height="{TemplateBinding extensions:IconedButton.IconSize}"
            extensions:IndependentSize.Width="{TemplateBinding extensions:IconedButton.IconSize}">
            <ContentControl x:Name="IconContentControl" Content="{TemplateBinding extensions:IconedButton.Icon}"/>
          </Viewbox>
        </Border>
      </Grid>
      <ContentControl
        x:Name="Switch"
        Grid.Row="0"
        Grid.Column="2"
        HorizontalAlignment="Left"
        extensions:IndependentSize.Height="20"
        Style="{StaticResource XStyle.ContentControl.Switch}"
        extensions:IconedButton.IconHorizontalAlignment="{Binding (extensions:IconedButton.IconHorizontalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}"
        extensions:ControlExtensions.Hover="{Binding Path=(extensions:ControlExtensions.Hover), RelativeSource={RelativeSource TemplatedParent}}"/>

      <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" HorizontalAlignment="Center">
        <ContentPresenter.Resources>
          <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.Caption}">
            <Setter Property="Background" Value="{StaticResource XBrush.AlmostTransparent}"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="{Binding (extensions:ToolTipExtension.AutoToolTip), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Setter Property="Foreground" Value="{StaticResource XBrush.Button.IconButton.Caption}"/>
            <Style.Triggers>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
              </Trigger>
            </Style.Triggers>
          </Style>
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Grid>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.IconAndSwitchOverText" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase.IconOverText}">
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ToggleButton.IconAndSwitchOverText}"/>
    <Setter Property="extensions:ControlExtensions.IsActive" Value="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
    <Setter Property="extensions:ControlExtensions.Hover" Value="False"/>
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="extensions:IconedButton.IconHorizontalAlignment" Value="Right"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="False">
        <Setter Property="extensions:IconedButton.IconHorizontalAlignment" Value="Left"/>
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="extensions:ControlExtensions.Hover" Value="True"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!--Icon and Chevron over Text-->
  <ControlTemplate x:Key="XControlTemplate.ToggleButton.IconAndChevronOverText" TargetType="{x:Type ToggleButton}">
    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border
        x:Name="ActiveBorder"
        HorizontalAlignment="Center"
        extensions:IndependentSize.Height="{StaticResource XDouble.Height.Control.Default}"
        extensions:ControlExtensions.IsActive="{TemplateBinding extensions:ControlExtensions.IsActive}"
        Style="{StaticResource XStyle.Border.Active.Secondary}">
        <Border
          extensions:ControlExtensions.IsPressed="{TemplateBinding IsPressed}"
          extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}"
          Style="{StaticResource XStyle.Border.HoverAndPress.TransparentToSecondary}">
          <Grid HorizontalAlignment="Center" Margin="{TemplateBinding Padding}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition extensions:IndependentSize.ColumnWidth="4"/>
              <ColumnDefinition extensions:IndependentSize.ColumnWidth="20"/>
            </Grid.ColumnDefinitions>
            <Viewbox
              Grid.Column="0"
              VerticalAlignment="Center"
              HorizontalAlignment="Center"
              IsHitTestVisible="False"
              Stretch="Uniform"
              extensions:IndependentSize.Height="{TemplateBinding extensions:IconedButton.IconSize}"
              extensions:IndependentSize.Width="{TemplateBinding extensions:IconedButton.IconSize}">
              <ContentControl x:Name="IconContentControl" Content="{TemplateBinding extensions:IconedButton.Icon}"/>
            </Viewbox>
            <Border Grid.Column="2" extensions:IndependentSize.MaxWidth="13" HorizontalAlignment="Center">
              <Path Style="{StaticResource XStyle.Path.Chevron}" extensions:ControlExtensions.Hover="{TemplateBinding IsMouseOver}">
                <Path.RenderTransform>
                  <RotateTransform x:Name="ChevronRotateTransform"/>
                </Path.RenderTransform>
              </Path>
            </Border>
          </Grid>
        </Border>
      </Border>
      <ContentPresenter Grid.Row="1" HorizontalAlignment="Center">
        <ContentPresenter.Resources>
          <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.Caption}">
            <Setter Property="Background" Value="{StaticResource XBrush.AlmostTransparent}"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="{Binding (extensions:ToolTipExtension.AutoToolTip), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Setter Property="Foreground" Value="{StaticResource XBrush.Button.IconButton.Caption}"/>
            <Style.Triggers>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource XBrush.Control.Foreground.Disabled}"/>
              </Trigger>
            </Style.Triggers>
          </Style>
        </ContentPresenter.Resources>
      </ContentPresenter>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="-90" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="ChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.Button.QuitModule" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.Button.Transparent}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Foreground.Secondary}" />
    <Setter Property="Height" Value="NaN" />
    <Setter Property="TextBlock.VerticalAlignment" Value="Center" />
    <Setter Property="TextBlock.HorizontalAlignment" Value="Left" />
    <Setter Property="extensions:IndependentSize.Height" Value="NaN" />
    <Setter Property="extensions:IndependentSize.Padding" Value="10,0,5,0" />
  </Style>

  <Style x:Key="XStyle.Button.Specific.Refresh" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.Button.Icon.Small}">
    <Setter Property="extensions:IconedButton.Icon" Value="{StaticResource XCanvas.Refresh}"/>
  </Style>

  <Style x:Key="XStyle.Button.Specific.Refresh.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.Button.Specific.Refresh}">
    <Setter Property="extensions:IconedButton.IconSize" Value="15" />
    <Setter Property="extensions:IndependentSize.Width" Value="22" />
    <Setter Property="extensions:IndependentSize.Height" Value="22" />
  </Style>

</ResourceDictionary>