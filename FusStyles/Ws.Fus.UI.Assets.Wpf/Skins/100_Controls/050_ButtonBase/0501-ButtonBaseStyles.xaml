<ResourceDictionary 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:extensions="http://schemas.insightec.com/wpf/">

  
  <ControlTemplate x:Key="XControlTemplate.ButtonBase" TargetType="{x:Type ButtonBase}">
    <Border
      x:Name="HoverBorder"
      Width="{TemplateBinding Width}"
      Height="{TemplateBinding Height}"
      extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
      Style="{StaticResource XStyle.Border.Hover}">
      <Grid>
        <Border
          x:Name="PressedBorder"
          Style="{StaticResource XStyle.Border.Pressed}"
          extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
          Opacity="0"/>
        <ContentPresenter
          x:Name="ContentPresenter"
          Margin="1,0,1,2"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          IsHitTestVisible="False"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="0" To="1" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="1" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ButtonBase" TargetType="{x:Type ButtonBase}">
    <Setter Property="extensions:ControlExtensions.ControlTheme" Value="None"/>
    <Setter Property="extensions:IndependentSize.Height" Value="36"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase}"/>
    <Setter Property="FontSize" Value="16"/>
    <Setter Property="Foreground" Value="{Binding Path=(extensions:ControlExtensions.ControlTheme), RelativeSource={RelativeSource Self}, Converter={extensions:ControlThemeToForegroundConverter}}"/>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False"/>
          <Condition Property="extensions:ControlExtensions.ControlTheme" Value="Secondary"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{StaticResource XBrush.Button.Secondary.Foreground.Disabled}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  
  <!--Text With Side Icon-->
  
  <ControlTemplate x:Key="XControlTemplate.ButtonBase.TextWithSideIcon" TargetType="{x:Type ButtonBase}">
    <Border
      x:Name="HoverBorder"
      Width="{TemplateBinding Width}"
      Height="{TemplateBinding Height}"
      extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
      Style="{StaticResource XStyle.Border.Hover}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border
          x:Name="PressedBorder"
          Grid.ColumnSpan="3"
          Style="{StaticResource XStyle.Border.Pressed}"
          extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
          Opacity="0"/>
        <Border x:Name="IconBorder" Grid.Column="0" Margin="1,0" Padding="0" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}">
          <Path
            Width="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
            Height="{Binding Path=(extensions:IconedButton.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
            Data="{Binding Path=(extensions:IconedButton.AlphaGeometry), RelativeSource={RelativeSource TemplatedParent}}"
            Fill="{TemplateBinding Foreground}"
            Stretch="Uniform"/>
        </Border>
        <ContentPresenter
          x:Name="ContentPresenter"
          Grid.Column="1"
          Grid.ColumnSpan="2"
          Margin="1,0,1,2"
          HorizontalAlignment="Left"
          VerticalAlignment="Center"
          IsHitTestVisible="False"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="extensions:IconedButton.IconHorizontalAlignment" Value="Right">
        <Setter TargetName="IconBorder" Property="Grid.Column" Value="2"/>
        <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="Center"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="0" To="1" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="1" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

</ResourceDictionary>