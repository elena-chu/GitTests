<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:extensions="http://schemas.insightec.com/wpf/">

  <Storyboard x:Key="XStoryboard.Rotate">
    <DoubleAnimation
      Storyboard.TargetName="RotateCircle"
      Storyboard.TargetProperty="Angle" 
      From="0"
      To="360"
      Duration="0:0:2"
      RepeatBehavior="Forever"/>
  </Storyboard>

  <ControlTemplate x:Key="XControlTemplate.StatusIndicator" TargetType="ContentControl">
    <Grid x:Name="OuterGrid" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
      <Ellipse
        x:Name="Circle"
        Stretch="UniformToFill"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Stroke="{TemplateBinding Foreground}"
        Fill="Transparent"
        StrokeThickness="1"
        RenderTransformOrigin="0.5,0.5">
        <Ellipse.RenderTransform>
          <RotateTransform x:Name="RotateCircle" Angle="0"/>
        </Ellipse.RenderTransform>
      </Ellipse>
      <Path
        x:Name="Checkmark"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Data="{StaticResource XGeometry.Checkmark}"
        Fill="{TemplateBinding Foreground}"
        Stretch="Uniform"
        Visibility="Visible"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="{x:Static extensions:ProgressState.Regular}">
        <Setter TargetName="Checkmark" Property="Visibility" Value="Collapsed"/>
        <Setter TargetName="Circle" Property="StrokeDashArray" Value="1,0"/>
        <Setter TargetName="Circle" Property="Width" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.95}"/>
        <Setter TargetName="Circle" Property="Height" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.95}"/>
      </Trigger>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="{x:Static extensions:ProgressState.Active}">
        <Setter TargetName="Checkmark" Property="Width" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.4}"/>
        <Setter TargetName="Checkmark" Property="Height" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.4}"/>
        <Setter TargetName="Circle" Property="StrokeDashArray" Value="2,1.5"/>
        <Setter TargetName="Circle" Property="StrokeThickness" Value="1.3"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="extensions:ProgressStatusDisplayer.ProgressState" Value="{x:Static extensions:ProgressState.Active}"/>
          <Condition Property="extensions:ProgressStatusDisplayer.AnimateActive" Value="True"/>
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard x:Name="RotateStoryboard" Storyboard="{StaticResource XStoryboard.Rotate}"/>
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
          <StopStoryboard BeginStoryboardName="RotateStoryboard"/>
        </MultiTrigger.ExitActions>
      </MultiTrigger>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="{x:Static extensions:ProgressState.Completed}">
        <Setter TargetName="Checkmark" Property="Width" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.55}"/>
        <Setter TargetName="Checkmark" Property="Height" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.55}"/>
        <Setter TargetName="Checkmark" Property="Fill" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter TargetName="Circle" Property="StrokeThickness" Value="0"/>
        <Setter TargetName="Circle" Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter TargetName="Circle" Property="Width" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.95}"/>
        <Setter TargetName="Circle" Property="Height" Value="{Binding ActualHeight, ElementName=OuterGrid, Converter={extensions:ScalarConverter}, ConverterParameter=0.95}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="OuterGrid" Property="Opacity" Value=".5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ContentControl.StatusIndicator" TargetType="ContentControl">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="extensions:ProgressStatusDisplayer.ProgressState" Value="{x:Static extensions:ProgressState.Regular}"/>
    <Setter Property="extensions:ProgressStatusDisplayer.AnimateActive" Value="False"/>
    <Setter Property="extensions:ProgressStatusDisplayer.ActiveAsForeground" Value="True" />
    <Setter Property="extensions:IndependentSize.Width" Value="18"/>
    <Setter Property="extensions:IndependentSize.Height" Value="18"/>
    <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Active}"/>
    <Setter Property="Background" Value="{StaticResource XBrush.Application.Background}"/>
    <Setter Property="IsEnabled" Value="True"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.StatusIndicator}"/>
    <Style.Triggers>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Regular">
        <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Foreground}"/>
      </Trigger>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Active">
        <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Active}"/>
      </Trigger>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Completed">
        <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Active}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="XStyle.ContentControl.StatusIndicator.WithText" TargetType="ContentControl">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="extensions:ProgressStatusDisplayer.ProgressState" Value="{x:Static extensions:ProgressState.Regular}"/>
    <Setter Property="Foreground" Value="{StaticResource XBrush.Application.Foreground}"/>
    <Setter Property="Background" Value="{StaticResource XBrush.Application.Background}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContentControl">
          <StackPanel Orientation="Horizontal">
            <ContentControl
              Style="{StaticResource XStyle.ContentControl.StatusIndicator}"
              extensions:IndependentSize.Margin="0,0,7,0"
              VerticalAlignment="Center"
              extensions:ProgressStatusDisplayer.ProgressState="{TemplateBinding extensions:ProgressStatusDisplayer.ProgressState}"
              extensions:ProgressStatusDisplayer.AnimateActive="{TemplateBinding extensions:ProgressStatusDisplayer.AnimateActive}"
              IsEnabled="{TemplateBinding IsEnabled}"/>
            <ContentPresenter VerticalAlignment="Center"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--StatusIndicator ToggleButton-->
  <ControlTemplate x:Key="XControlTemplate.ButtonBase.StatusIndicator" TargetType="{x:Type ButtonBase}">
    <Border
      x:Name="BackgroundBorder"
      extensions:IndependentSize.Width="{TemplateBinding extensions:IndependentSize.Width}"
      extensions:IndependentSize.Height="{TemplateBinding extensions:IndependentSize.Height}"
      extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
      Style="{StaticResource XStyle.Border.Background}"
      Background="{TemplateBinding Background}">
      <Border
        x:Name="HoverBorder"
        extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
        extensions:ControlExtensions.HoverPercentage="{TemplateBinding extensions:ControlExtensions.HoverPercentage}"
        Style="{StaticResource XStyle.Border.Hover}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="{Binding ActualWidth, ElementName=StatusIndicatorColumn}"/>
            <ColumnDefinition/>
            <ColumnDefinition x:Name="StatusIndicatorColumn" Width="Auto"/>
          </Grid.ColumnDefinitions>
          <Border
            x:Name="PressedBorder"
            Grid.ColumnSpan="3"
            Style="{StaticResource XStyle.Border.Pressed}"
            extensions:ControlExtensions.ControlTheme="{TemplateBinding extensions:ControlExtensions.ControlTheme}"
            Opacity="0"/>
          <ContentPresenter
            x:Name="ContentPresenter"
            Grid.Column="1"
            extensions:IndependentSize.Margin="1,0,1,1"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            IsHitTestVisible="False">
            <ContentPresenter.Resources>
              <Style TargetType="{x:Type TextBlock}">
                <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="True"/>
              </Style>
            </ContentPresenter.Resources>
          </ContentPresenter>
          <ContentControl
            x:Name="StatusIndicator"
            Grid.Column="2"
            Style="{StaticResource XStyle.ContentControl.StatusIndicator}"
            extensions:IndependentSize.Width="18"
            extensions:IndependentSize.Height="18"
            extensions:IndependentSize.Margin="10,0,10,0"
            IsHitTestVisible="False"
            VerticalAlignment="Center"
            Foreground="{TemplateBinding Foreground}"
            Background="{TemplateBinding Background}"
            extensions:ProgressStatusDisplayer.ProgressState="{TemplateBinding extensions:ProgressStatusDisplayer.ProgressState}"
            extensions:ProgressStatusDisplayer.AnimateActive="False"/>
        </Grid>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="0" To="1" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity">
              <DoubleAnimation From="1" To="0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Regular">
        <Setter TargetName="StatusIndicator" Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Active"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Active"/>
          <Condition Property="extensions:ProgressStatusDisplayer.AnimateActive" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="StatusIndicator" Property="extensions:ProgressStatusDisplayer.AnimateActive" Value="True"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="XStyle.ToggleButton.StatusIndicator" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource XStyle.ButtonBase}">
    <Setter Property="extensions:ControlExtensions.ControlTheme" Value="Primary"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase.StatusIndicator}"/>
    <Setter Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Regular"/>
    <Setter Property="extensions:ProgressStatusDisplayer.AnimateActive" Value="True"/>
    <Setter Property="IsChecked" Value="False"/>
    <Setter Property="Background" Value="{Binding Path=(extensions:ControlExtensions.ControlTheme), RelativeSource={RelativeSource Self}, Converter={extensions:ControlThemeToBackgroundConverter}}"/>
    <Style.Triggers>
      <Trigger Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Active">
        <Setter Property="IsChecked" Value="True"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="extensions:ProgressStatusDisplayer.AnimateActive" Value="True"/>
        <Setter Property="Background" Value="{Binding Path=(extensions:ControlExtensions.ControlTheme), RelativeSource={RelativeSource Self}, Converter={extensions:ControlThemeToBackgroundPressedConverter}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="XStyle.Button.Approval" TargetType="{x:Type Button}" BasedOn="{StaticResource XStyle.ButtonBase}">
    <Setter Property="extensions:ControlExtensions.ControlTheme" Value="Primary"/>
    <Setter Property="Template" Value="{StaticResource XControlTemplate.ButtonBase.StatusIndicator}"/>
    <Setter Property="extensions:ProgressStatusDisplayer.ProgressState" Value="Regular"/>
    <Setter Property="extensions:ProgressStatusDisplayer.AnimateActive" Value="False"/>
    <Setter Property="Background" Value="{Binding Path=(extensions:ControlExtensions.ControlTheme), RelativeSource={RelativeSource Self}, Converter={extensions:ControlThemeToBackgroundConverter}}"/>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <!-- Check for Primary/Secondary-->
        <Setter Property="Background" Value="{StaticResource XBrush.Button.Primary.Background.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>