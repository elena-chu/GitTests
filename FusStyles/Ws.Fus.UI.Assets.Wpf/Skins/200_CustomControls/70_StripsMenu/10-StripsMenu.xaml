<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:extensions="http://schemas.insightec.com/wpf/">

  <SolidColorBrush x:Key="XBrush.Strips.Frame.Loaded" Color="{StaticResource XColor.Button.Primary.Background.Pressed}"/>
  <SolidColorBrush x:Key="XBrush.Strips.Frame.Unloaded" Color="{StaticResource XColor.Button.IconButton.Caption}"/>
  <SolidColorBrush x:Key="XBrush.Strips.Foreground.Loaded" Color="{StaticResource XColor.Application.Active}"/>
  <SolidColorBrush x:Key="XBrush.Strips.Foreground.Unloaded" Color="{StaticResource XColor.Application.Foreground.Secondary}"/>

  <Style x:Key="XStyle.Strips.ToolTip" TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
    <Setter Property="Placement" Value="Left" />
    <Setter Property="HorizontalOffset" Value="10" />
    <Setter Property="VerticalOffset" Value="10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border
              Style="{StaticResource XStyle.Border.Frame}"
              extensions:IndependentSize.CornerRadius="1"
              Background="{StaticResource XBrush.Application.Background}"
              BorderBrush="{StaticResource XBrush.Line}">
            <ContentPresenter
              extensions:IndependentSize.Margin="12,5,12,8"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              SnapsToDevicePixels="True"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="XStyle.Strips.Border.Frame" TargetType="{x:Type Border}" BasedOn="{StaticResource XStyle.Border}">
    <Setter Property="ToolTipService.InitialShowDelay" Value="1200"/>
    <Setter Property="ToolTipService.ShowDuration" Value="15000"/>
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
    <Setter Property="extensions:IndependentSize.Margin" Value="12,1"/>
    <Setter Property="Background" Value="{StaticResource XBrush.AlmostTransparent}"/>
    <Setter Property="extensions:IndependentSize.BorderThickness" Value="{StaticResource XThickness.Frame}"/>
    <Setter Property="BorderBrush" Value="{StaticResource XBrush.Strips.Frame.Unloaded}"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsLoaded}" Value="True">
        <Setter Property="BorderBrush" Value="{StaticResource XBrush.Strips.Frame.Loaded}"/>
      </DataTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.BorderThickness)" To="2" Duration="{StaticResource XDuration.Animation.Short}"/>
              <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.Margin)" To="11,0" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.BorderThickness)" To="{StaticResource XThickness.Frame}" Duration="{StaticResource XDuration.Animation.Short}"/>
              <ThicknessAnimation Storyboard.TargetProperty="(extensions:IndependentSize.Margin)" To="12,1" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
          <Condition Binding="{Binding IsLoaded}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
              <ColorAnimation To="{StaticResource XColor.Application.Active}" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </MultiDataTrigger.EnterActions>
        <MultiDataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
              <ColorAnimation To="{StaticResource XColor.Button.Primary.Background.Pressed}" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </MultiDataTrigger.ExitActions>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
          <Condition Binding="{Binding IsLoaded}" Value="False"/>
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
              <ColorAnimation To="{StaticResource XColor.Application.Foreground.Secondary}" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </MultiDataTrigger.EnterActions>
        <MultiDataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetProperty="BorderBrush.Color">
              <ColorAnimation To="{StaticResource XColor.Button.IconButton.Caption}" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </MultiDataTrigger.ExitActions>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="XStyle.Strips.Border.Emphasis" TargetType="{x:Type Border}" BasedOn="{StaticResource XStyle.Border}">
    <Setter Property="Background" Value="{StaticResource XBrush.Application.Background}"/>
    <Setter Property="Opacity" Value="0.6"/>
  </Style>

  <Style x:Key="XStyle.Strips.TextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource XStyle.TextBlock.Caption}">
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="extensions:IndependentSize.FontSize" Value="{StaticResource XDouble.FontSize.ToolTip}"/>
    <Setter Property="Foreground" Value="{StaticResource XBrush.Strips.Foreground.Unloaded}"/>
    <Setter Property="TextWrapping" Value="NoWrap"/>
    <Setter Property="extensions:ToolTipExtension.AutoToolTip" Value="False"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsLoaded}" Value="True">
        <Setter Property="Foreground" Value="{StaticResource XBrush.Strips.Foreground.Loaded}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="XStyle.Strips.Image" TargetType="{x:Type Image}">
    <Setter Property="Stretch" Value="UniformToFill"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Opacity" Value="0.88"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="False">
        <Setter Property="Opacity" Value="0.6"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
        <DataTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource XStoryboard.DoubleAnimation.Opacity.ToOpaque}"/>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard Storyboard.TargetProperty="Opacity">
              <DoubleAnimation To="0.88" Duration="{StaticResource XDuration.Animation.Short}"/>
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="XStyle.ListBoxItem.Strips" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource XStyle.ListBoxItem.Transparent}">
    <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="extensions:IndependentSize.Margin" Value="0,4,0,6"/>
  </Style>
</ResourceDictionary>